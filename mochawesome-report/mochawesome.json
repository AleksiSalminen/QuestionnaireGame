{
  "stats": {
    "suites": 46,
    "tests": 252,
    "passes": 252,
    "pending": 0,
    "failures": 0,
    "start": "2019-12-23T19:46:05.768Z",
    "end": "2019-12-23T19:46:34.032Z",
    "duration": 28264,
    "testsRegistered": 252,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ed2e837c-45eb-40c8-8d1c-bfbe52a62348",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook: Global Before All",
          "fullTitle": "\"before all\" hook: Global Before All",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const clearDb = async () => {\n    for (const i in mongoose.connection.collections) {\n        await mongoose.connection.collections[i].deleteMany({});\n    }\nif (mongoose.connection.readyState === 0) {\n    await mongoose\n        .connect(`mongodb://${dbConfig.host}:${dbConfig.port}/${dbConfig.db}`, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n            useFindAndModify: false,\n            useCreateIndex: true\n        });\n    mongoose.connection.on('error', (err) => {\n        console.error(err);\n    });\n    mongoose.connection.on('reconnectFailed', (err) => {\n        throw err;\n    });\n\n    return await clearDb();\n} else {\n    return await clearDb();\n}\n}",
          "err": {},
          "uuid": "72559c35-ffdd-432b-ac9b-ca2648147d1a",
          "parentUUID": "ed2e837c-45eb-40c8-8d1c-bfbe52a62348",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook: Global After All",
          "fullTitle": "\"after all\" hook: Global After All",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "mongoose.disconnect();\ndone();",
          "err": {},
          "uuid": "a1766615-c3ae-44d6-aa5b-86e1bc3037db",
          "parentUUID": "ed2e837c-45eb-40c8-8d1c-bfbe52a62348",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "b456c80f-80d2-4998-a16b-8908ac9cda77",
          "title": "Create Questionnaire",
          "fullFile": "/bwa/test/assignment/createQuestionnaire.test.js",
          "file": "/test/assignment/createQuestionnaire.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Create Questionnaire \"before all\" hook",
              "timedOut": false,
              "duration": 656,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    User.deleteMany({});\n    const admin = new User(adminData);\n    admin.save();\n    const teacher = new User(teacherData);\n    teacher.save();\n    const student = new User(studentData);\n    student.save();\n}\ncatch (err) {\n  // eslint-disable-next-line no-console\n  console.log(err);\n  throw err;\n}",
              "err": {},
              "uuid": "55fb8b7e-b931-487d-9899-07b187ba161e",
              "parentUUID": "b456c80f-80d2-4998-a16b-8908ac9cda77",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Create Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "adminUser\n    .post('/users/login')\n    .send(adminCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "b8a45a59-23d2-4a75-975c-6a2c6b7e0d72",
              "parentUUID": "b456c80f-80d2-4998-a16b-8908ac9cda77",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Create Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "teacherUser\n    .post('/users/login')\n    .send(teacherCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "cd1b9b18-7218-4e47-bb73-5fea2417930a",
              "parentUUID": "b456c80f-80d2-4998-a16b-8908ac9cda77",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Create Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentUser\n    .post('/users/login')\n    .send(studentCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "4a679281-a3e1-4605-b19e-ceab31411c97",
              "parentUUID": "b456c80f-80d2-4998-a16b-8908ac9cda77",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Create Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Questionnaire.deleteMany({});\nlet questionnaire = new Questionnaire(questionnaireData);\nawait questionnaire.save();",
              "err": {},
              "uuid": "610d503a-d2a0-496a-a775-f33e6c58f88c",
              "parentUUID": "b456c80f-80d2-4998-a16b-8908ac9cda77",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ced0a3c2-eb96-4059-b4ff-5847bdd83aaa",
              "title": "Questionnaire creation authorization",
              "fullFile": "/bwa/test/assignment/createQuestionnaire.test.js",
              "file": "/test/assignment/createQuestionnaire.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "must let an admin to create new questionnaires",
                  "fullTitle": "Create Questionnaire Questionnaire creation authorization must let an admin to create new questionnaires",
                  "timedOut": false,
                  "duration": 306,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\nsendToServer(rawData, 200, 200, adminUser, done);",
                  "err": {},
                  "uuid": "b4810e0c-e5fe-4b8c-b9ed-0252f6ecef44",
                  "parentUUID": "ced0a3c2-eb96-4059-b4ff-5847bdd83aaa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must let a teacher to create new questionnaires",
                  "fullTitle": "Create Questionnaire Questionnaire creation authorization must let a teacher to create new questionnaires",
                  "timedOut": false,
                  "duration": 160,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rawData = fs.readFileSync(fPath + '/teacherQuestionnaire.json', 'utf8');\nsendToServer(rawData, 200, 200, teacherUser, done);",
                  "err": {},
                  "uuid": "220a2781-d55f-4689-a1b6-9f36e106ecb3",
                  "parentUUID": "ced0a3c2-eb96-4059-b4ff-5847bdd83aaa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must NOT let a student to create new questionnaires",
                  "fullTitle": "Create Questionnaire Questionnaire creation authorization must NOT let a student to create new questionnaires",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rawData = fs.readFileSync(fPath + '/studentQuestionnaire.json', 'utf8');\nsendToServer(rawData, 302, 302, studentUser, done);",
                  "err": {},
                  "uuid": "c9b41d9b-0b98-4082-879a-cf952cd2c749",
                  "parentUUID": "ced0a3c2-eb96-4059-b4ff-5847bdd83aaa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must NOT let a non-logged-in user to edit questionnaires",
                  "fullTitle": "Create Questionnaire Questionnaire creation authorization must NOT let a non-logged-in user to edit questionnaires",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rawData = fs.readFileSync(fPath + '/studentQuestionnaire.json', 'utf8');\nsendToServer(rawData, 302, 302, unauthorizedUser, done);",
                  "err": {},
                  "uuid": "3fb1e343-1750-48c7-aaab-ea7675259692",
                  "parentUUID": "ced0a3c2-eb96-4059-b4ff-5847bdd83aaa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must require a valid csrf token",
                  "fullTitle": "Create Questionnaire Questionnaire creation authorization must require a valid csrf token",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rawData = fs.readFileSync(fPath + '/emptyTitle.json', 'utf8');\nconst csrfToken = '\" \"';\nconst data = rawData + csrfToken + ' }';\nadminUser.post('/questionnaires/new')\n    .send(JSON.parse(data))\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res.statusCode).to.equal(403);\n        done();\n    });",
                  "err": {},
                  "uuid": "46177407-1716-409f-bc91-e1bb3dd1bbaa",
                  "parentUUID": "ced0a3c2-eb96-4059-b4ff-5847bdd83aaa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4810e0c-e5fe-4b8c-b9ed-0252f6ecef44",
                "220a2781-d55f-4689-a1b6-9f36e106ecb3",
                "c9b41d9b-0b98-4082-879a-cf952cd2c749",
                "3fb1e343-1750-48c7-aaab-ea7675259692",
                "46177407-1716-409f-bc91-e1bb3dd1bbaa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 560,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "9ede534e-c204-4bb0-a7f8-0d5782422891",
              "title": "New questionnaire validation",
              "fullFile": "/bwa/test/assignment/createQuestionnaire.test.js",
              "file": "/test/assignment/createQuestionnaire.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "must be able to handle an empty questionnaire",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle an empty questionnaire",
                  "timedOut": false,
                  "duration": 128,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'emptyQuestionnaire.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "afe1d7ca-15de-4fc3-85ef-34fde1480824",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle an empty title",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle an empty title",
                  "timedOut": false,
                  "duration": 162,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'emptyTitle.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "1fd37765-6a33-4199-ae87-ec27d5e30598",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle a too long title",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle a too long title",
                  "timedOut": false,
                  "duration": 113,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'tooLongTitle.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "8b939619-3e44-4953-9911-93f85fef491e",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle a duplicate title",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle a duplicate title",
                  "timedOut": false,
                  "duration": 124,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'duplicateTitle.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "5526dc85-2c95-4c1e-9941-5b33b0220b3b",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle incorrect submissions number",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle incorrect submissions number",
                  "timedOut": false,
                  "duration": 148,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'incorrectSubmissions.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "0253d60d-dd3e-4055-8052-fe79f087d38b",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle a no questions situation",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle a no questions situation",
                  "timedOut": false,
                  "duration": 105,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'noQuestions.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "be438175-2630-449a-8262-b9c883e5cf0d",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle a duplicate questions title",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle a duplicate questions title",
                  "timedOut": false,
                  "duration": 111,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'duplicateQuestions.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "fcb2f333-d3a0-4ac0-a8db-ab71e7918c57",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle a no options situation",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle a no options situation",
                  "timedOut": false,
                  "duration": 131,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'noOptions.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "0d30054a-3883-4ca9-abe8-ed0f1d3534d2",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle incorrect number of options",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle incorrect number of options",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'incorrectNumberOfOptions.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "b9827aa3-79d9-4c3d-8415-90f30f177f5f",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle duplicate options",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle duplicate options",
                  "timedOut": false,
                  "duration": 129,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'duplicateOptions.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "f6e34009-700f-4235-8afa-6e168676d57e",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle \"true\" options missing",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle \"true\" options missing",
                  "timedOut": false,
                  "duration": 137,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'trueOptionsMissing.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "426eb0e2-58c3-4005-a0ef-29eea07b14af",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle incorrect max points",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle incorrect max points",
                  "timedOut": false,
                  "duration": 137,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'incorrectMaxPoints.json';\nvalidationSend(file, done);",
                  "err": {},
                  "uuid": "89055939-713c-4c1b-8f86-d9455593aade",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle xss",
                  "fullTitle": "Create Questionnaire New questionnaire validation must be able to handle xss",
                  "timedOut": false,
                  "duration": 114,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'xss.json';\nvalidationSendMore(file, 200, 200, done);",
                  "err": {},
                  "uuid": "1674c912-cffa-4b0e-bd7e-fa1a291bf128",
                  "parentUUID": "9ede534e-c204-4bb0-a7f8-0d5782422891",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "afe1d7ca-15de-4fc3-85ef-34fde1480824",
                "1fd37765-6a33-4199-ae87-ec27d5e30598",
                "8b939619-3e44-4953-9911-93f85fef491e",
                "5526dc85-2c95-4c1e-9941-5b33b0220b3b",
                "0253d60d-dd3e-4055-8052-fe79f087d38b",
                "be438175-2630-449a-8262-b9c883e5cf0d",
                "fcb2f333-d3a0-4ac0-a8db-ab71e7918c57",
                "0d30054a-3883-4ca9-abe8-ed0f1d3534d2",
                "b9827aa3-79d9-4c3d-8415-90f30f177f5f",
                "f6e34009-700f-4235-8afa-6e168676d57e",
                "426eb0e2-58c3-4005-a0ef-29eea07b14af",
                "89055939-713c-4c1b-8f86-d9455593aade",
                "1674c912-cffa-4b0e-bd7e-fa1a291bf128"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1691,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "63c77637-7a80-4462-ab30-b01bea397047",
          "title": "Delete Questionnaire",
          "fullFile": "/bwa/test/assignment/deleteQuestionnaire.test.js",
          "file": "/test/assignment/deleteQuestionnaire.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Delete Questionnaire \"before all\" hook",
              "timedOut": false,
              "duration": 605,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await User.deleteMany({});\n    const admin = new User(adminData);\n    await admin.save();\n    const teacher = new User(teacherData);\n    await teacher.save();\n    const student = new User(studentData);\n    await student.save();\n}\ncatch (err) {\n  // eslint-disable-next-line no-console\n  console.log(err);\n  throw err;\n}",
              "err": {},
              "uuid": "3dbf2186-d3ce-4e15-a3f5-095c1b9946cd",
              "parentUUID": "63c77637-7a80-4462-ab30-b01bea397047",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Delete Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "adminUser\n    .post('/users/login')\n    .send(adminCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "740aab42-50be-4a16-beee-2411e6ade429",
              "parentUUID": "63c77637-7a80-4462-ab30-b01bea397047",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Delete Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "teacherUser\n    .post('/users/login')\n    .send(teacherCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "c67d289e-3608-43d5-9095-af3e93bd1f39",
              "parentUUID": "63c77637-7a80-4462-ab30-b01bea397047",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Delete Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentUser\n    .post('/users/login')\n    .send(studentCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "fd813fe8-4d3c-4204-a19d-8c57860f788c",
              "parentUUID": "63c77637-7a80-4462-ab30-b01bea397047",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Delete Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Questionnaire.deleteMany({});\nlet questionnaire = new Questionnaire(questionnaireData);\nawait questionnaire.save();",
              "err": {},
              "uuid": "ad2879ed-c497-4107-b966-029136a9154e",
              "parentUUID": "63c77637-7a80-4462-ab30-b01bea397047",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0d632455-021b-4c99-94ac-5627ac4c0bc1",
              "title": "Questionnaire deletion authorization",
              "fullFile": "/bwa/test/assignment/deleteQuestionnaire.test.js",
              "file": "/test/assignment/deleteQuestionnaire.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "must let an admin to delete questionnaires",
                  "fullTitle": "Delete Questionnaire Questionnaire deletion authorization must let an admin to delete questionnaires",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sendToServerDelete(200, 200, adminUser, done);",
                  "err": {},
                  "uuid": "699087d7-8bd0-4b11-b9e6-4987c0265f97",
                  "parentUUID": "0d632455-021b-4c99-94ac-5627ac4c0bc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must let a teacher to delete questionnaires",
                  "fullTitle": "Delete Questionnaire Questionnaire deletion authorization must let a teacher to delete questionnaires",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sendToServerDelete(200, 200, teacherUser, done);",
                  "err": {},
                  "uuid": "746a74d4-5990-45b8-8ff7-25880c649dd0",
                  "parentUUID": "0d632455-021b-4c99-94ac-5627ac4c0bc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must NOT let a student to delete questionnaires",
                  "fullTitle": "Delete Questionnaire Questionnaire deletion authorization must NOT let a student to delete questionnaires",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sendToServerDelete(302, 302, studentUser, done);",
                  "err": {},
                  "uuid": "f1904003-e19e-4a65-9e02-ee304fa85ffc",
                  "parentUUID": "0d632455-021b-4c99-94ac-5627ac4c0bc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must NOT let a not-logged-in person to delete questionnaires",
                  "fullTitle": "Delete Questionnaire Questionnaire deletion authorization must NOT let a not-logged-in person to delete questionnaires",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sendToServerDelete(302, 302, unauthorizedUser, done);",
                  "err": {},
                  "uuid": "052996ae-87d5-4816-ac57-3169d4c42e17",
                  "parentUUID": "0d632455-021b-4c99-94ac-5627ac4c0bc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must require a valid csrf token",
                  "fullTitle": "Delete Questionnaire Questionnaire deletion authorization must require a valid csrf token",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const csrfToken = '\" \"';\nconst rawData = fs.readFileSync(fPath + 'adminQuestionnaire.json', 'utf8');\nconst data = rawData + csrfToken + ' }';\nlet id = Questionnaire.find({title: questionnaireData.title}).select('_id').exec( (err, id) => {\n    id = id[0]._id;\n    adminUser.post('/questionnaires/edit/' + id)\n        .send(JSON.parse(data))\n        .end(function (err, res) {\n            if (err) return done(err);\n            expect(res.statusCode).to.equal(403);\n            done();\n        });\n});",
                  "err": {},
                  "uuid": "3b931849-dca1-4d91-a63c-6876673aea10",
                  "parentUUID": "0d632455-021b-4c99-94ac-5627ac4c0bc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "699087d7-8bd0-4b11-b9e6-4987c0265f97",
                "746a74d4-5990-45b8-8ff7-25880c649dd0",
                "f1904003-e19e-4a65-9e02-ee304fa85ffc",
                "052996ae-87d5-4816-ac57-3169d4c42e17",
                "3b931849-dca1-4d91-a63c-6876673aea10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 285,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "23d421ce-e500-4a4e-b1dc-4340420fdb55",
          "title": "Game: A+ protocol",
          "fullFile": "/bwa/test/assignment/management.test.js",
          "file": "/test/assignment/management.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "C: create operation available",
              "fullTitle": "Game: A+ protocol C: create operation available",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n* Create operation testing done in\n* createQuestionnaire.test.js\n*/",
              "err": {},
              "uuid": "fc76c8d4-e7cd-48e8-86c5-402eb5fcf416",
              "parentUUID": "23d421ce-e500-4a4e-b1dc-4340420fdb55",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "R: read operation available",
              "fullTitle": "Game: A+ protocol R: read operation available",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n* Read operation testing done in\n* readQuestionnaire.test.js\n*/",
              "err": {},
              "uuid": "c4f0df30-ff60-44c3-962a-356dda62bc24",
              "parentUUID": "23d421ce-e500-4a4e-b1dc-4340420fdb55",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "U: update operation available",
              "fullTitle": "Game: A+ protocol U: update operation available",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n* Update operation testing done in\n* updateQuestionnaire.test.js\n*/",
              "err": {},
              "uuid": "3087cb0c-136c-4448-bb55-dae2f2e0d965",
              "parentUUID": "23d421ce-e500-4a4e-b1dc-4340420fdb55",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "D: delete operation available",
              "fullTitle": "Game: A+ protocol D: delete operation available",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/*\n* Delete operation testing done in\n* deleteQuestionnaire.test.js\n*/",
              "err": {},
              "uuid": "e7c30d4e-edd2-4d71-9a86-aaaa4dec14aa",
              "parentUUID": "23d421ce-e500-4a4e-b1dc-4340420fdb55",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc76c8d4-e7cd-48e8-86c5-402eb5fcf416",
            "c4f0df30-ff60-44c3-962a-356dda62bc24",
            "3087cb0c-136c-4448-bb55-dae2f2e0d965",
            "e7c30d4e-edd2-4d71-9a86-aaaa4dec14aa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "25cf9a4d-c01d-4026-aa70-89a70041cf3a",
          "title": "Read Questionnaire",
          "fullFile": "/bwa/test/assignment/readQuestionnaire.test.js",
          "file": "/test/assignment/readQuestionnaire.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Read Questionnaire \"before all\" hook",
              "timedOut": false,
              "duration": 593,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await User.deleteMany({});\n    const admin = new User(adminData);\n    await admin.save();\n    const teacher = new User(teacherData);\n    await teacher.save();\n    const student = new User(studentData);\n    await student.save();\n}\ncatch (err) {\n  // eslint-disable-next-line no-console\n  console.log(err);\n  throw err;\n}",
              "err": {},
              "uuid": "192bfccc-bb5d-42c4-8be8-85f344ed4ca8",
              "parentUUID": "25cf9a4d-c01d-4026-aa70-89a70041cf3a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Read Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "adminUser\n    .post('/users/login')\n    .send(adminCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "cc7a4931-33e5-4310-9515-753ddfcc53a5",
              "parentUUID": "25cf9a4d-c01d-4026-aa70-89a70041cf3a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Read Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "teacherUser\n    .post('/users/login')\n    .send(teacherCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "322cf21a-e962-4fc1-8b8c-239c755f56e6",
              "parentUUID": "25cf9a4d-c01d-4026-aa70-89a70041cf3a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Read Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentUser\n    .post('/users/login')\n    .send(studentCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "993614d0-7a04-4c4b-a301-6eb0114493a2",
              "parentUUID": "25cf9a4d-c01d-4026-aa70-89a70041cf3a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Read Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Questionnaire.deleteMany({});\nlet questionnaire = new Questionnaire(questionnaireData);\nid = questionnaire._id;\nawait questionnaire.save();",
              "err": {},
              "uuid": "457ede86-a7af-4901-b99d-7c0bc9d91940",
              "parentUUID": "25cf9a4d-c01d-4026-aa70-89a70041cf3a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "70cda694-e0ee-4c15-89df-1e9e0627795f",
              "title": "Listing questionnaires",
              "fullFile": "/bwa/test/assignment/readQuestionnaire.test.js",
              "file": "/test/assignment/readQuestionnaire.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Admin should be able to list questionnaires.",
                  "fullTitle": "Read Questionnaire Listing questionnaires Admin should be able to list questionnaires.",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\nsendToServerList(200, adminUser, done);",
                  "err": {},
                  "uuid": "d53f9530-b866-450c-b0ad-cc1c3cec3f3a",
                  "parentUUID": "70cda694-e0ee-4c15-89df-1e9e0627795f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Teacher should be able to list questionnaires.",
                  "fullTitle": "Read Questionnaire Listing questionnaires Teacher should be able to list questionnaires.",
                  "timedOut": false,
                  "duration": 70,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\nsendToServerList(200, teacherUser, done);",
                  "err": {},
                  "uuid": "4898849c-3c8c-4dda-a4ae-e2b7b582c9e0",
                  "parentUUID": "70cda694-e0ee-4c15-89df-1e9e0627795f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Student should NOT be able to list questionnaires.",
                  "fullTitle": "Read Questionnaire Listing questionnaires Student should NOT be able to list questionnaires.",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\nsendToServerList(302, studentUser, done);",
                  "err": {},
                  "uuid": "1c3613d7-30dc-4bb8-af06-0d4fc60f1fe4",
                  "parentUUID": "70cda694-e0ee-4c15-89df-1e9e0627795f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Non-logged-in user should NOT be able to list questionnaires.",
                  "fullTitle": "Read Questionnaire Listing questionnaires Non-logged-in user should NOT be able to list questionnaires.",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\nsendToServerList(302, unauthorizedUser, done);",
                  "err": {},
                  "uuid": "5ed6740e-711c-412a-90c0-0f46e9036ac9",
                  "parentUUID": "70cda694-e0ee-4c15-89df-1e9e0627795f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d53f9530-b866-450c-b0ad-cc1c3cec3f3a",
                "4898849c-3c8c-4dda-a4ae-e2b7b582c9e0",
                "1c3613d7-30dc-4bb8-af06-0d4fc60f1fe4",
                "5ed6740e-711c-412a-90c0-0f46e9036ac9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 140,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "dd48c628-bcf5-46ac-aa25-9e83eff813b5",
              "title": "Showing questions",
              "fullFile": "/bwa/test/assignment/readQuestionnaire.test.js",
              "file": "/test/assignment/readQuestionnaire.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Admin should be able to show questions.",
                  "fullTitle": "Read Questionnaire Showing questions Admin should be able to show questions.",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\nsendToServerShow(id, 200, adminUser, done);",
                  "err": {},
                  "uuid": "ce8f6489-c846-48fb-bac9-79513f9dca6e",
                  "parentUUID": "dd48c628-bcf5-46ac-aa25-9e83eff813b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Teacher should be able to show questions.",
                  "fullTitle": "Read Questionnaire Showing questions Teacher should be able to show questions.",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\nsendToServerShow(id, 200, teacherUser, done);",
                  "err": {},
                  "uuid": "868d086c-5c7a-400f-ace2-e2c1d2cf5a16",
                  "parentUUID": "dd48c628-bcf5-46ac-aa25-9e83eff813b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Student should NOT be able to show questions.",
                  "fullTitle": "Read Questionnaire Showing questions Student should NOT be able to show questions.",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\nsendToServerShow(id, 302, studentUser, done);",
                  "err": {},
                  "uuid": "e717b7fe-97db-4ae3-b906-aaf994617bef",
                  "parentUUID": "dd48c628-bcf5-46ac-aa25-9e83eff813b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Non-logged-in user should NOT be able to show questions.",
                  "fullTitle": "Read Questionnaire Showing questions Non-logged-in user should NOT be able to show questions.",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\nsendToServerShow(id, 302, unauthorizedUser, done);",
                  "err": {},
                  "uuid": "d395fb04-8608-4f01-933c-293b596ca59e",
                  "parentUUID": "dd48c628-bcf5-46ac-aa25-9e83eff813b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce8f6489-c846-48fb-bac9-79513f9dca6e",
                "868d086c-5c7a-400f-ace2-e2c1d2cf5a16",
                "e717b7fe-97db-4ae3-b906-aaf994617bef",
                "d395fb04-8608-4f01-933c-293b596ca59e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "9b21a9c6-5f94-4089-a4c6-70fe3c7d6b50",
          "title": "Update Questionnaire",
          "fullFile": "/bwa/test/assignment/updateQuestionnaire.test.js",
          "file": "/test/assignment/updateQuestionnaire.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Update Questionnaire \"before all\" hook",
              "timedOut": false,
              "duration": 609,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    await User.deleteMany({});\n    const admin = new User(adminData);\n    await admin.save();\n    const teacher = new User(teacherData);\n    await teacher.save();\n    const student = new User(studentData);\n    await student.save();\n}\ncatch (err) {\n  // eslint-disable-next-line no-console\n  console.log(err);\n  throw err;\n}",
              "err": {},
              "uuid": "960cb647-dd29-4a71-beb4-f29374f68a83",
              "parentUUID": "9b21a9c6-5f94-4089-a4c6-70fe3c7d6b50",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook",
              "fullTitle": "Update Questionnaire \"before all\" hook",
              "timedOut": false,
              "duration": 228,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "adminUser\n    .post('/users/login')\n    .send(adminCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "df611c2f-fd13-40aa-a7d5-180fda5562e9",
              "parentUUID": "9b21a9c6-5f94-4089-a4c6-70fe3c7d6b50",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook",
              "fullTitle": "Update Questionnaire \"before all\" hook",
              "timedOut": false,
              "duration": 212,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "teacherUser\n    .post('/users/login')\n    .send(teacherCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "f77361d0-4046-4b43-bf1b-418c32ffdac9",
              "parentUUID": "9b21a9c6-5f94-4089-a4c6-70fe3c7d6b50",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook",
              "fullTitle": "Update Questionnaire \"before all\" hook",
              "timedOut": false,
              "duration": 208,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "studentUser\n    .post('/users/login')\n    .send(studentCredentials)\n    .end(function (err, response) {\n        if (err) return done(err);\n        expect(response.statusCode).to.equal(302);\n        expect('Location', '/users/me');\n        done();\n    });",
              "err": {},
              "uuid": "67689651-99c6-4498-95f1-1aad774737d5",
              "parentUUID": "9b21a9c6-5f94-4089-a4c6-70fe3c7d6b50",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Update Questionnaire \"before each\" hook",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Questionnaire.deleteMany({});\nlet questionnaire = new Questionnaire(questionnaireData);\nid = questionnaire._id;\nawait questionnaire.save();",
              "err": {},
              "uuid": "26658a9a-c08f-43a8-a52b-44511ccd4dd4",
              "parentUUID": "9b21a9c6-5f94-4089-a4c6-70fe3c7d6b50",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cf0cd9c8-e4fc-4d90-aa1e-9dd85631c53e",
              "title": "Questionnaire updating authorization",
              "fullFile": "/bwa/test/assignment/updateQuestionnaire.test.js",
              "file": "/test/assignment/updateQuestionnaire.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "must let an admin to edit questionnaires",
                  "fullTitle": "Update Questionnaire Questionnaire updating authorization must let an admin to edit questionnaires",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\n        sendToServer(rawData, id, 200, 200, adminUser, done);",
                  "err": {},
                  "uuid": "079324aa-04b3-42a7-b5cc-a6feab63f25d",
                  "parentUUID": "cf0cd9c8-e4fc-4d90-aa1e-9dd85631c53e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must let a teacher to edit questionnaires",
                  "fullTitle": "Update Questionnaire Questionnaire updating authorization must let a teacher to edit questionnaires",
                  "timedOut": false,
                  "duration": 169,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rawData = fs.readFileSync(fPath + '/teacherQuestionnaire.json', 'utf8');\n        sendToServer(rawData, id, 200, 200, teacherUser, done);",
                  "err": {},
                  "uuid": "8bad3709-31ef-49d7-a243-9e438856cedf",
                  "parentUUID": "cf0cd9c8-e4fc-4d90-aa1e-9dd85631c53e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must NOT let a student to edit questionnaires",
                  "fullTitle": "Update Questionnaire Questionnaire updating authorization must NOT let a student to edit questionnaires",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rawData = fs.readFileSync(fPath + '/studentQuestionnaire.json', 'utf8');\n        sendToServer(rawData, id, 302, 302, studentUser, done);",
                  "err": {},
                  "uuid": "65c8655c-890d-4775-9b29-713008e7cb25",
                  "parentUUID": "cf0cd9c8-e4fc-4d90-aa1e-9dd85631c53e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must NOT let a non-logged-in user to edit questionnaires",
                  "fullTitle": "Update Questionnaire Questionnaire updating authorization must NOT let a non-logged-in user to edit questionnaires",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rawData = fs.readFileSync(fPath + '/studentQuestionnaire.json', 'utf8');\n        sendToServer(rawData, id, 302, 302, unauthorizedUser, done);",
                  "err": {},
                  "uuid": "02613b96-fadf-460f-846f-de34fd4902c5",
                  "parentUUID": "cf0cd9c8-e4fc-4d90-aa1e-9dd85631c53e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must require a valid csrf token",
                  "fullTitle": "Update Questionnaire Questionnaire updating authorization must require a valid csrf token",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rawData = fs.readFileSync(fPath + '/adminQuestionnaire.json', 'utf8');\nconst csrfToken = '\" \"';\nconst data = rawData + csrfToken + ' }';\nadminUser.post('/questionnaires/edit/' + id)\n    .send(JSON.parse(data))\n    .end(function (err, res) {\n        if (err) return done(err);\n        expect(res.statusCode).to.equal(403);\n        done();\n    });",
                  "err": {},
                  "uuid": "22f16551-2cc5-4038-ac9b-896d623069bb",
                  "parentUUID": "cf0cd9c8-e4fc-4d90-aa1e-9dd85631c53e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "079324aa-04b3-42a7-b5cc-a6feab63f25d",
                "8bad3709-31ef-49d7-a243-9e438856cedf",
                "65c8655c-890d-4775-9b29-713008e7cb25",
                "02613b96-fadf-460f-846f-de34fd4902c5",
                "22f16551-2cc5-4038-ac9b-896d623069bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 451,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
              "title": "Questionnaire editing validation",
              "fullFile": "/bwa/test/assignment/updateQuestionnaire.test.js",
              "file": "/test/assignment/updateQuestionnaire.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "must be able to handle an empty questionnaire",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle an empty questionnaire",
                  "timedOut": false,
                  "duration": 112,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'emptyQuestionnaire.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "3fa46f5c-7e14-445c-8d0a-dca128be0394",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle an empty title",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle an empty title",
                  "timedOut": false,
                  "duration": 142,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'emptyTitle.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "f5e4c026-e8fa-4e3c-bee4-44a8be898d06",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle a too long title",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle a too long title",
                  "timedOut": false,
                  "duration": 125,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'tooLongTitle.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "8f2b48d6-99ec-47e0-8c61-057a9b34a6a2",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle incorrect submissions number",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle incorrect submissions number",
                  "timedOut": false,
                  "duration": 152,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'incorrectSubmissions.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "6c5253ff-be25-42d0-895a-4e07996d791d",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle a no questions situation",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle a no questions situation",
                  "timedOut": false,
                  "duration": 106,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'noQuestions.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "57da8482-0cad-40bc-9eed-1b3244118bbb",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle a duplicate questions title",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle a duplicate questions title",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'duplicateQuestions.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "c1847737-4a82-4a7f-ab37-308ef4968061",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle a no options situation",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle a no options situation",
                  "timedOut": false,
                  "duration": 102,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'noOptions.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "7ac4c546-4a0f-4650-9e2d-7f227a28fe3a",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle incorrect number of options",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle incorrect number of options",
                  "timedOut": false,
                  "duration": 108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'incorrectNumberOfOptions.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "541ae2a1-b1b5-40fb-89c4-f95ff95291c4",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle duplicate options",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle duplicate options",
                  "timedOut": false,
                  "duration": 107,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'duplicateOptions.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "08d7c7a4-9ae4-4729-b478-0f522c58960a",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle \"true\" options missing",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle \"true\" options missing",
                  "timedOut": false,
                  "duration": 165,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'trueOptionsMissing.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "dbb89a9e-0a19-4d93-bfa2-2a32bdf12efa",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle incorrect max points",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle incorrect max points",
                  "timedOut": false,
                  "duration": 159,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'incorrectMaxPoints.json';\nvalidationSend(file, id, done);",
                  "err": {},
                  "uuid": "98ab1909-c56e-4cb9-9f2b-f37b06f9b73b",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must be able to handle xss",
                  "fullTitle": "Update Questionnaire Questionnaire editing validation must be able to handle xss",
                  "timedOut": false,
                  "duration": 110,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = 'xss.json';\nvalidationSendMore(file, id, 200, 200, done);",
                  "err": {},
                  "uuid": "90c70020-6295-4ce2-8852-edc5c0dbbcb3",
                  "parentUUID": "067646d3-35ca-4cc1-bdb4-d5f766a8531d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3fa46f5c-7e14-445c-8d0a-dca128be0394",
                "f5e4c026-e8fa-4e3c-bee4-44a8be898d06",
                "8f2b48d6-99ec-47e0-8c61-057a9b34a6a2",
                "6c5253ff-be25-42d0-895a-4e07996d791d",
                "57da8482-0cad-40bc-9eed-1b3244118bbb",
                "c1847737-4a82-4a7f-ab37-308ef4968061",
                "7ac4c546-4a0f-4650-9e2d-7f227a28fe3a",
                "541ae2a1-b1b5-40fb-89c4-f95ff95291c4",
                "08d7c7a4-9ae4-4729-b478-0f522c58960a",
                "dbb89a9e-0a19-4d93-bfa2-2a32bdf12efa",
                "98ab1909-c56e-4cb9-9f2b-f37b06f9b73b",
                "90c70020-6295-4ce2-8852-edc5c0dbbcb3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1498,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "30f33aa3-e3d9-4bd7-af3c-8fa349250b6e",
          "title": "Game reply: A+ protocol",
          "fullFile": "/bwa/test/integration/hello.reply.test.js",
          "file": "/test/integration/hello.reply.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Game reply: A+ protocol \"before each\" hook",
              "timedOut": false,
              "duration": 474,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server = http.createServer(app).listen(port);\nBrowser.localhost('bwa', port);\nbrowser = new Browser();\n// console.log('A+ protocol defined in https://github.com/Aalto-LeTech/a-plus/blob/master/doc/GRADERS.md');\nawait auth(browser);\nawait browser.visit('/');\nawait browser.pressButton('#grade');",
              "err": {},
              "uuid": "144544ef-31bd-425f-bb3d-7ff4f0c811a3",
              "parentUUID": "30f33aa3-e3d9-4bd7-af3c-8fa349250b6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Game reply: A+ protocol \"after each\" hook",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server.close();",
              "err": {},
              "uuid": "1fabda4c-2b53-43cd-82e1-a1614414b886",
              "parentUUID": "30f33aa3-e3d9-4bd7-af3c-8fa349250b6e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "must have meta field \"status\" in head",
              "fullTitle": "Game reply: A+ protocol must have meta field \"status\" in head",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(\n    browser.document.head.querySelectorAll('[name=status]').length,\n    1\n);",
              "err": {},
              "uuid": "65e09bf7-2080-45b9-bb1a-d30fec75bd84",
              "parentUUID": "30f33aa3-e3d9-4bd7-af3c-8fa349250b6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have meta field \"max_points\" in head",
              "fullTitle": "Game reply: A+ protocol should have meta field \"max_points\" in head",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(\n    browser.document.head.querySelectorAll('[name=max_points]').length,\n    1\n);",
              "err": {},
              "uuid": "98d1cbb4-3b13-4fb1-ae2c-af9ca637d815",
              "parentUUID": "30f33aa3-e3d9-4bd7-af3c-8fa349250b6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "must have meta field \"points\" in head",
              "fullTitle": "Game reply: A+ protocol must have meta field \"points\" in head",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(\n    browser.document.head.querySelectorAll('[name=points]').length,\n    1\n);",
              "err": {},
              "uuid": "b0409b70-115c-4225-a875-731051233fe4",
              "parentUUID": "30f33aa3-e3d9-4bd7-af3c-8fa349250b6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "meta field \"points\" in head must be less than or equal to max_points",
              "fullTitle": "Game reply: A+ protocol meta field \"points\" in head must be less than or equal to max_points",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const pointsElem = browser.document.head.querySelector('[name=points]');\nconst points = parseInt(pointsElem.getAttribute('content'));\nconst maxPointsElem = browser.document.head.querySelector(\n    '[name=max_points]'\n);\nconst maxPoints = parseInt(maxPointsElem.getAttribute('content'));\nassert(\n    points <= maxPoints,\n    'head meta points must be less or equal to max_points'\n);",
              "err": {},
              "uuid": "216df446-7831-4cdf-b938-8cd19b440b86",
              "parentUUID": "30f33aa3-e3d9-4bd7-af3c-8fa349250b6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have meta field \"DC.Description\" in head",
              "fullTitle": "Game reply: A+ protocol should have meta field \"DC.Description\" in head",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Where does this field come from? Or more specifically\n// where does the value/description come from?\n// (Not strictly related to testing but still...)\nassert.equal(\n    browser.document.head.querySelectorAll('[name=\"DC.Description\"]')\n        .length,\n    1\n);",
              "err": {},
              "uuid": "2fe98b63-5971-465d-9c8f-f82e3dc14254",
              "parentUUID": "30f33aa3-e3d9-4bd7-af3c-8fa349250b6e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have meta field \"DC.Title\" in head",
              "fullTitle": "Game reply: A+ protocol should have meta field \"DC.Title\" in head",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Where does this field come from? Or more specifically\n// where does the value/title come from? (Is this the question title?)\n// (Not strictly related to testing but still...)\nassert.equal(\n    browser.document.head.querySelectorAll('[name=\"DC.Title\"]').length,\n    1\n);",
              "err": {},
              "uuid": "22508f62-fb7c-40bf-a966-0cbb4c345143",
              "parentUUID": "30f33aa3-e3d9-4bd7-af3c-8fa349250b6e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "65e09bf7-2080-45b9-bb1a-d30fec75bd84",
            "98d1cbb4-3b13-4fb1-ae2c-af9ca637d815",
            "b0409b70-115c-4225-a875-731051233fe4",
            "216df446-7831-4cdf-b938-8cd19b440b86",
            "2fe98b63-5971-465d-9c8f-f82e3dc14254",
            "22508f62-fb7c-40bf-a966-0cbb4c345143"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "6f7e08d1-0b2f-4a7a-ae17-e338ba610ae0",
          "title": "Game: A+ protocol",
          "fullFile": "/bwa/test/integration/hello.test.js",
          "file": "/test/integration/hello.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Game: A+ protocol \"before each\" hook",
              "timedOut": false,
              "duration": 375,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server = http.createServer(app).listen(port);\nBrowser.localhost('bwa', port);\nbrowser = new Browser();\n// console.log('A+ protocol defined in https://github.com/Aalto-LeTech/a-plus/blob/master/doc/GRADERS.md');\nawait auth(browser);\nawait browser.visit('/');",
              "err": {},
              "uuid": "5eceb3fe-fd61-4857-bb1a-7d3557556853",
              "parentUUID": "6f7e08d1-0b2f-4a7a-ae17-e338ba610ae0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Game: A+ protocol \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "server.close();",
              "err": {},
              "uuid": "7fc11175-4ad4-4c4e-80db-2cd2f01f0e2f",
              "parentUUID": "6f7e08d1-0b2f-4a7a-ae17-e338ba610ae0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "must have a form with POST method",
              "fullTitle": "Game: A+ protocol must have a form with POST method",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//http://zombie.js.org/#assertions\nbrowser.assert.element('form[method=\"POST\"]');\n// browser.assert.attribute('form', 'method', 'post');",
              "err": {},
              "uuid": "b0c0f262-2207-412f-8a4c-401f3c5a7008",
              "parentUUID": "6f7e08d1-0b2f-4a7a-ae17-e338ba610ae0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "must have a form with submit button",
              "fullTitle": "Game: A+ protocol must have a form with submit button",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "browser.assert.element('form button[type=\"submit\"]');",
              "err": {},
              "uuid": "6571c962-e90e-423f-a83e-ae1407565e0a",
              "parentUUID": "6f7e08d1-0b2f-4a7a-ae17-e338ba610ae0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "the submit button must have id \"grade\"",
              "fullTitle": "Game: A+ protocol the submit button must have id \"grade\"",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "browser.assert.element('#grade');\nbrowser.assert.element('button#grade');",
              "err": {},
              "uuid": "c1e5d103-ea97-40a4-adf9-61c5a553f2ed",
              "parentUUID": "6f7e08d1-0b2f-4a7a-ae17-e338ba610ae0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0c0f262-2207-412f-8a4c-401f3c5a7008",
            "6571c962-e90e-423f-a83e-ae1407565e0a",
            "c1e5d103-ea97-40a4-adf9-61c5a553f2ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "1c4e04e2-0cfe-4711-be54-32ab5248be50",
          "title": "Application security",
          "fullFile": "/bwa/test/integration/security.test.js",
          "file": "/test/integration/security.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Application security \"before each\" hook",
              "timedOut": false,
              "duration": 238,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { email, password } = admin;\nrequest = chai.request.agent(app);\nresponse = await request\n    .post(loginUrl)\n    .type('form')\n    .send({ email, password });",
              "err": {},
              "uuid": "f3b64567-9382-4d32-8d56-8d223d5fae38",
              "parentUUID": "1c4e04e2-0cfe-4711-be54-32ab5248be50",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook",
              "fullTitle": "Application security \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await response.get('/users/logout');\nrequest.close();",
              "err": {},
              "uuid": "c030fdd6-e2db-49d3-aa55-7008ff1cfcdd",
              "parentUUID": "1c4e04e2-0cfe-4711-be54-32ab5248be50",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should have \"HttpOnly\" cookie policy",
              "fullTitle": "Application security should have \"HttpOnly\" cookie policy",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cookie = response.headers['set-cookie'].find(cookieString => {\n    return cookieString.startsWith('bwa=');\n}).toLowerCase();\n// eslint-disable-next-line no-unused-expressions\nexpect(cookie).to.exist;\nexpect(cookie).to.include('httponly');",
              "err": {},
              "uuid": "ec6817b7-5a28-4db2-baf1-bd0ae517736a",
              "parentUUID": "1c4e04e2-0cfe-4711-be54-32ab5248be50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have \"SameSite\" cookie policy set to Strict or Lax",
              "fullTitle": "Application security should have \"SameSite\" cookie policy set to Strict or Lax",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const cookie = response.headers['set-cookie'].find(cookieString => {\n    return cookieString.startsWith('bwa=');\n}).toLowerCase();\nexpect(cookie).to.satisfy((c) => {\n    return c.includes('samesite=lax') || c.includes('samesite=strict');\n});",
              "err": {},
              "uuid": "908aca6d-3bab-45ce-aed5-2d05035825ac",
              "parentUUID": "1c4e04e2-0cfe-4711-be54-32ab5248be50",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should block directory traversal",
              "fullTitle": "Application security should block directory traversal",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response = await request.get('/../app.js');\nexpect(response).to.have.status(404);",
              "err": {},
              "uuid": "9dc4685f-900d-4407-94a7-80eea74acf12",
              "parentUUID": "1c4e04e2-0cfe-4711-be54-32ab5248be50",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec6817b7-5a28-4db2-baf1-bd0ae517736a",
            "908aca6d-3bab-45ce-aed5-2d05035825ac",
            "9dc4685f-900d-4407-94a7-80eea74acf12"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "d7f64e97-cca8-4532-a1b6-40cfa6df9a56",
          "title": "/users",
          "fullFile": "/bwa/test/integration/users.test.js",
          "file": "/test/integration/users.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "/users \"before each\" hook",
              "timedOut": false,
              "duration": 197,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    // remove all users from the database and re-create admin user\n    await User.deleteMany({});\n    const userData = {...admin, role: 'admin'};\n    const user = new User(userData);\n    await user.save();\n} catch (err) {\n    // eslint-disable-next-line no-console\n    console.log(err);\n    throw err;\n}",
              "err": {},
              "uuid": "ffdde707-cd80-437f-9c73-e3a89fd631a3",
              "parentUUID": "d7f64e97-cca8-4532-a1b6-40cfa6df9a56",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
              "title": "/register",
              "fullFile": "/bwa/test/integration/users.test.js",
              "file": "/test/integration/users.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "/users /register \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request = chai.request.agent(app);\npayload = {\n    name: 'user',\n    email: 'user@sposti.fi',\n    password: '1234567890',\n    passwordConfirmation: '1234567890'\n};",
                  "err": {},
                  "uuid": "df2971cb-fbe9-44fd-b99a-39c40f440849",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook",
                  "fullTitle": "/users /register \"after each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.close();",
                  "err": {},
                  "uuid": "47d22f51-bb99-4fee-b68e-c23b2a6ea617",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should register successfully a correct user",
                  "fullTitle": "/users /register should register successfully a correct user",
                  "timedOut": false,
                  "duration": 243,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request\n    .post(registerUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.redirectTo(/\\/users\\/login$/);\nconst user = await User.findOne({ email: payload.email }).exec();\nexpect(user).to.exist;",
                  "err": {},
                  "uuid": "4fec78af-4710-45e7-95cc-81857017e7c2",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "by default, the role of the registered user is student",
                  "fullTitle": "/users /register by default, the role of the registered user is student",
                  "timedOut": false,
                  "duration": 240,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request\n    .post(registerUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.redirectTo(/\\/users\\/login$/);\nconst user = await User.findOne({ email: payload.email }).exec();\nexpect(user).to.exist;\nexpect(user.role).to.exist;\nexpect(user.role).to.equal('student');",
                  "err": {},
                  "uuid": "68b64b9a-2dcc-49c6-8482-8d6485379510",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should prevent from registering the same user twice",
                  "fullTitle": "/users /register should prevent from registering the same user twice",
                  "timedOut": false,
                  "duration": 265,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await request\n    .post(registerUrl)\n    .type('form')\n    .send(payload);\nconst response = await request\n    .post(registerUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.not.redirect;\nexpect(response).to.be.html;\nconst user = await User.findOne({ email: payload.email }).exec();\nexpect(user).to.exist;",
                  "err": {},
                  "uuid": "85f5c335-b280-4fe6-bd60-b9b4c73f4497",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail registeration due to a missing email",
                  "fullTitle": "/users /register should fail registeration due to a missing email",
                  "timedOut": false,
                  "duration": 135,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const email = payload.email;\ndelete payload.email;\nconst response = await request\n    .post(registerUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.not.redirect;\nexpect(response).to.be.html;\nconst user = await User.findOne({ email }).exec();\nexpect(user).not.to.exist;",
                  "err": {},
                  "uuid": "e36d3b94-efe6-4e1c-8601-c173200d676b",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not accept registration with illegal email",
                  "fullTitle": "/users /register should not accept registration with illegal email",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "payload.email = 'wrong-wrong';\nconst response = await request\n    .post(registerUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.not.redirect;\nexpect(response).to.be.html;\nconst user = await User.findOne({ email: payload.email }).exec();\nexpect(user).not.to.exist;",
                  "err": {},
                  "uuid": "17cadfdb-d810-46aa-a10f-4f750d216b24",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not accept registration with missing password",
                  "fullTitle": "/users /register should not accept registration with missing password",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete payload.password;\nconst response = await request\n    .post(registerUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.not.redirect;\nexpect(response).to.be.html;\nconst user = await User.findOne({ email: payload.email }).exec();\nexpect(user).not.to.exist;",
                  "err": {},
                  "uuid": "f22c2278-416a-4e2a-b6a5-aaff59a62416",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not accept registration with too short password",
                  "fullTitle": "/users /register should not accept registration with too short password",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "payload.email = '1';\nconst response = await request\n    .post(registerUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.not.redirect;\nexpect(response).to.be.html;\nconst user = await User.findOne({ email: payload.email }).exec();\nexpect(user).not.to.exist;",
                  "err": {},
                  "uuid": "3f0d30c3-a092-4196-b481-4ea715ce314f",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not accept registration with missing password confirmation",
                  "fullTitle": "/users /register should not accept registration with missing password confirmation",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete payload.passwordConfirmation;\nconst response = await request\n    .post(registerUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.not.redirect;\nexpect(response).to.be.html;\nconst user = await User.findOne({ email: payload.email }).exec();\nexpect(user).not.to.exist;",
                  "err": {},
                  "uuid": "0064ef81-b80e-4f93-9bf8-07a2092cc725",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not accept registration with different password and confirmation",
                  "fullTitle": "/users /register should not accept registration with different password and confirmation",
                  "timedOut": false,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "payload.passwordConfirmation = `${payload.password}sdfjkhasjkhf`;\nconst response = await request\n    .post(registerUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.not.redirect;\nexpect(response).to.be.html;\nconst user = await User.findOne({ email: payload.email }).exec();\nexpect(user).not.to.exist;",
                  "err": {},
                  "uuid": "ce314a90-3a70-40ba-afbd-05c7cd4cdd7c",
                  "parentUUID": "8a788fe0-40cf-4e66-bbbe-85d6f8939a5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fec78af-4710-45e7-95cc-81857017e7c2",
                "68b64b9a-2dcc-49c6-8482-8d6485379510",
                "85f5c335-b280-4fe6-bd60-b9b4c73f4497",
                "e36d3b94-efe6-4e1c-8601-c173200d676b",
                "17cadfdb-d810-46aa-a10f-4f750d216b24",
                "f22c2278-416a-4e2a-b6a5-aaff59a62416",
                "3f0d30c3-a092-4196-b481-4ea715ce314f",
                "0064ef81-b80e-4f93-9bf8-07a2092cc725",
                "ce314a90-3a70-40ba-afbd-05c7cd4cdd7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1072,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "edaf3b4f-f808-4538-a44b-a0ca1f48dac4",
              "title": "/login",
              "fullFile": "/bwa/test/integration/users.test.js",
              "file": "/test/integration/users.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "/users /login \"before each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request = chai.request.agent(app);\n// create a new copy of admin for each test\npayload = { ...admin };\ndelete payload.name;\ndelete payload.role;",
                  "err": {},
                  "uuid": "282fa749-934d-4e61-9d86-63fc988730a6",
                  "parentUUID": "edaf3b4f-f808-4538-a44b-a0ca1f48dac4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook",
                  "fullTitle": "/users /login \"after each\" hook",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "request.close();",
                  "err": {},
                  "uuid": "c2273098-f147-4f43-bf24-fa7fb64f8aba",
                  "parentUUID": "edaf3b4f-f808-4538-a44b-a0ca1f48dac4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "should not accept login with missing email",
                  "fullTitle": "/users /login should not accept login with missing email",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete payload.email;\nconst response = await request\n    .post(loginUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.redirectTo(/\\/users\\/login$/);",
                  "err": {},
                  "uuid": "5d8d2f33-885a-4744-bed2-16293317fe60",
                  "parentUUID": "edaf3b4f-f808-4538-a44b-a0ca1f48dac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not accept login with invalid email",
                  "fullTitle": "/users /login should not accept login with invalid email",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// remove '@' sing from email to intentionally make it invalid\npayload.email = payload.email.replace('@', '');\nconst response = await request\n    .post(loginUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.redirectTo(/\\/users\\/login$/);",
                  "err": {},
                  "uuid": "6caf8076-add5-456b-a003-e22ff55a7b68",
                  "parentUUID": "edaf3b4f-f808-4538-a44b-a0ca1f48dac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not accept login with wrong email",
                  "fullTitle": "/users /login should not accept login with wrong email",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// prepend one letter in front of the email to intentionally get it wrong\n// but keeping it still valid\npayload.email = `x${payload.email}`;\nconst response = await request\n    .post(loginUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.redirectTo(/\\/users\\/login$/);",
                  "err": {},
                  "uuid": "829d57fd-3cc0-4d91-ab86-002fa8e2aa51",
                  "parentUUID": "edaf3b4f-f808-4538-a44b-a0ca1f48dac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not accept login with missing password",
                  "fullTitle": "/users /login should not accept login with missing password",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "delete payload.password;\nconst response = await request\n    .post(loginUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.redirectTo(/\\/users\\/login$/);",
                  "err": {},
                  "uuid": "530bd076-cd04-4300-b49e-db0690477065",
                  "parentUUID": "edaf3b4f-f808-4538-a44b-a0ca1f48dac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not accept login with wrong password",
                  "fullTitle": "/users /login should not accept login with wrong password",
                  "timedOut": false,
                  "duration": 230,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// reverse password to intentionally get it wrong\npayload.password = [...payload.password].reverse().join('');\nconst response = await request\n    .post(loginUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.redirectTo(/\\/users\\/login$/);",
                  "err": {},
                  "uuid": "87d35f6d-0139-48fa-bffa-a6c7c896d461",
                  "parentUUID": "edaf3b4f-f808-4538-a44b-a0ca1f48dac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept login with correct credentials",
                  "fullTitle": "/users /login should accept login with correct credentials",
                  "timedOut": false,
                  "duration": 245,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await request\n    .post(loginUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.have.cookie('bwa');\nexpect(response).to.redirectTo(/\\/$/);",
                  "err": {},
                  "uuid": "12c682d7-320c-410a-a397-4712abe22711",
                  "parentUUID": "edaf3b4f-f808-4538-a44b-a0ca1f48dac4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should redirect to root \"/\" if already logged in",
                  "fullTitle": "/users /login should redirect to root \"/\" if already logged in",
                  "timedOut": false,
                  "duration": 295,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// log in\nlet response = await request\n    .post(loginUrl)\n    .type('form')\n    .send(payload);\nexpect(response).to.have.cookie('bwa');\nexpect(response).to.redirectTo(/\\/$/);\n// already logged in\nresponse = await request\n    .get(loginUrl);\nexpect(response).to.redirectTo(/\\/$/);",
                  "err": {},
                  "uuid": "2eba567b-ef65-45de-9ed4-1e25cb9ea47d",
                  "parentUUID": "edaf3b4f-f808-4538-a44b-a0ca1f48dac4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d8d2f33-885a-4744-bed2-16293317fe60",
                "6caf8076-add5-456b-a003-e22ff55a7b68",
                "829d57fd-3cc0-4d91-ab86-002fa8e2aa51",
                "530bd076-cd04-4300-b49e-db0690477065",
                "87d35f6d-0139-48fa-bffa-a6c7c896d461",
                "12c682d7-320c-410a-a397-4712abe22711",
                "2eba567b-ef65-45de-9ed4-1e25cb9ea47d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 926,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "1351f601-024c-4527-bf2a-37e9f9a66d9e",
          "title": "Config",
          "fullFile": "/bwa/test/models/db.test.js",
          "file": "/test/models/db.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bedb4a7a-e640-41b1-93d3-dcf17ca0c8db",
              "title": "mongo config",
              "fullFile": "/bwa/test/models/db.test.js",
              "file": "/test/models/db.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "must have mongo key",
                  "fullTitle": "Config mongo config must have mongo key",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mongoConfig = config.mongo;\nexpect(mongoConfig).to.exist;",
                  "err": {},
                  "uuid": "c9c48710-a9a4-4222-952a-2ec143993470",
                  "parentUUID": "bedb4a7a-e640-41b1-93d3-dcf17ca0c8db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must have a JSON object as a value",
                  "fullTitle": "Config mongo config must have a JSON object as a value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mongoConfig = config.mongo;\nexpect(mongoConfig).to.be.an('object');",
                  "err": {},
                  "uuid": "2653650c-4b19-4c7d-a3d2-ab0189f0c9b8",
                  "parentUUID": "bedb4a7a-e640-41b1-93d3-dcf17ca0c8db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must define keys host, port, and db in the JSON object",
                  "fullTitle": "Config mongo config must define keys host, port, and db in the JSON object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mongoConfig = config.mongo;\nexpect(mongoConfig.host).to.exist;\nexpect(mongoConfig.port).to.exist;\nexpect(mongoConfig.db).to.exist;",
                  "err": {},
                  "uuid": "ca0ba395-e1df-4d38-bd80-c5e57b292249",
                  "parentUUID": "bedb4a7a-e640-41b1-93d3-dcf17ca0c8db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9c48710-a9a4-4222-952a-2ec143993470",
                "2653650c-4b19-4c7d-a3d2-ab0189f0c9b8",
                "ca0ba395-e1df-4d38-bd80-c5e57b292249"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "89e3fb16-d9b6-4fec-8940-a5e2ca904c6b",
              "title": "db connection",
              "fullFile": "/bwa/test/models/db.test.js",
              "file": "/test/models/db.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "must be able to store data",
                  "fullTitle": "Config db connection must be able to store data",
                  "timedOut": false,
                  "duration": 57,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const dbConfig = config.get('mongo');\n            // connect to database\n            const db = require('../../models/db');\n            db.connectDB(dbConfig);\n            // const number=2;\n            const rawData = fs.readFileSync(path.resolve(__dirname, '../../setup/game.questionnaire.json'));\n            const data = JSON.parse(rawData);\n            const Questionnaire = require('../../models/questionnaire');\n            // delete old entries and from the database\n            await Questionnaire.deleteMany({}); //TODO - reconsider\n            // then add sample data to database\n            //TODO: ask the count before and after, the delta should be NUMBER_OF_QUESTIONS\n            await Questionnaire.create(data);\n            db.disconnectDB();",
                  "err": {},
                  "uuid": "9557e8ea-71bc-48e5-9f11-6d0396f8929f",
                  "parentUUID": "89e3fb16-d9b6-4fec-8940-a5e2ca904c6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9557e8ea-71bc-48e5-9f11-6d0396f8929f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 57,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "9f7bbac2-5e82-490b-b545-e30b136e9c23",
          "title": "Hello",
          "fullFile": "/bwa/test/models/hello.test.js",
          "file": "/test/models/hello.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ff022dec-2c83-4fc7-a724-e498778d58ad",
              "title": "grade()",
              "fullFile": "/bwa/test/models/hello.test.js",
              "file": "/test/models/hello.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 0 (zero) if answer is not a string",
                  "fullTitle": "Hello grade() should return 0 (zero) if answer is not a string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const answers = [1, null, undefined, {}, [], true, Symbol(), NaN];\nconst maxPoints = 2;\nanswers.forEach((answer) => {\n    const grade = Hello.grade(answer, maxPoints);\n    expect(grade).to.equal(0);\n});",
                  "err": {},
                  "uuid": "46ff56f6-538b-46e1-b30a-961a08713691",
                  "parentUUID": "ff022dec-2c83-4fc7-a724-e498778d58ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 0 (zero) if maxPoints is not an integer",
                  "fullTitle": "Hello grade() should return 0 (zero) if maxPoints is not an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const answer = 'HELLO A+';\nconst points = [\n    '',\n    1.1,\n    null,\n    undefined,\n    {},\n    [],\n    true,\n    Symbol(),\n    NaN\n];\npoints.forEach((maxPoints) => {\n    const grade = Hello.grade(answer, maxPoints);\n    expect(grade).to.equal(0);\n});",
                  "err": {},
                  "uuid": "0f6511c2-ef8e-4a96-9186-d15a0f999683",
                  "parentUUID": "ff022dec-2c83-4fc7-a724-e498778d58ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 0 (zero) if \"maxPoints < 2\"",
                  "fullTitle": "Hello grade() should return 0 (zero) if \"maxPoints < 2\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const answer = 'HELLO A+';\nconst points = [-1, 0, 1];\npoints.forEach((maxPoints) => {\n    const grade = Hello.grade(answer, maxPoints);\n    expect(grade).to.equal(0);\n});",
                  "err": {},
                  "uuid": "84f295ab-098c-4fbb-9c40-c2b461a075df",
                  "parentUUID": "ff022dec-2c83-4fc7-a724-e498778d58ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 0 (zero) if \"maxPoints is an odd number (not divisible by 2)\"",
                  "fullTitle": "Hello grade() should return 0 (zero) if \"maxPoints is an odd number (not divisible by 2)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const answer = 'HELLO A+';\nconst points = [3, 5, 7];\npoints.forEach((maxPoints) => {\n    const grade = Hello.grade(answer, maxPoints);\n    expect(grade).to.equal(0);\n});",
                  "err": {},
                  "uuid": "19c6f4e7-86a6-4d2a-b23b-e39607fac123",
                  "parentUUID": "ff022dec-2c83-4fc7-a724-e498778d58ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 0 (zero) when answer is empty",
                  "fullTitle": "Hello grade() should return 0 (zero) when answer is empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const answer = '';\nconst maxPoints = 2;\nconst grade = Hello.grade(answer, maxPoints);\nexpect(grade).to.equal(0);",
                  "err": {},
                  "uuid": "292ff153-b4b3-44b2-bf17-aaf03287bbd3",
                  "parentUUID": "ff022dec-2c83-4fc7-a724-e498778d58ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return 0 (zero) when answer does not contain either \"A+\" or \"HELLO\"",
                  "fullTitle": "Hello grade() should return 0 (zero) when answer does not contain either \"A+\" or \"HELLO\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const answer = 'x';\nconst maxPoints = 2;\nconst grade = Hello.grade(answer, maxPoints);\nexpect(grade).to.equal(0);",
                  "err": {},
                  "uuid": "d047e61e-d9af-40a5-a8f2-b234ab0f61f1",
                  "parentUUID": "ff022dec-2c83-4fc7-a724-e498778d58ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return maxPoints/2 when answer contains \"A+\" but not \"HELLO\"",
                  "fullTitle": "Hello grade() should return maxPoints/2 when answer contains \"A+\" but not \"HELLO\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const answers = ['a+', 'A+', ' a+', 'A+ ', ' a+ ', 'aA+a+Aa'];\nconst maxPoints = 2;\nanswers.forEach((answer) => {\n    const grade = Hello.grade(answer, maxPoints);\n    expect(grade).to.equal(maxPoints / 2);\n});",
                  "err": {},
                  "uuid": "d714bee0-7e3a-4b55-8b9a-d0060a70cd2a",
                  "parentUUID": "ff022dec-2c83-4fc7-a724-e498778d58ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return maxPoints/2 when answer contains \"HELLO\" but not \"A+\"",
                  "fullTitle": "Hello grade() should return maxPoints/2 when answer contains \"HELLO\" but not \"A+\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const answers = [\n    'hello',\n    'HELLO',\n    ' hello',\n    'HELLO ',\n    ' hello ',\n    'aAHelLoAa'\n];\nconst maxPoints = 2;\nanswers.forEach((answer) => {\n    const grade = Hello.grade(answer, maxPoints);\n    expect(grade).to.equal(maxPoints / 2);\n});",
                  "err": {},
                  "uuid": "5d6a40f5-63ce-427a-9049-b60c55cfec09",
                  "parentUUID": "ff022dec-2c83-4fc7-a724-e498778d58ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return maxPoints when answer contains both \"A+\" and \"HELLO\"",
                  "fullTitle": "Hello grade() should return maxPoints when answer contains both \"A+\" and \"HELLO\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const answers = [\n    'helloa+',\n    'A+HELLO',\n    'A+ hello',\n    'HELLO a+',\n    ' a+ hello ',\n    'aA+HelLoAa'\n];\nconst maxPoints = 2;\nanswers.forEach((answer) => {\n    const grade = Hello.grade(answer, maxPoints);\n    expect(grade).to.equal(maxPoints);\n});",
                  "err": {},
                  "uuid": "85c1459a-4ad9-4c73-b8e0-1f08e3f658de",
                  "parentUUID": "ff022dec-2c83-4fc7-a724-e498778d58ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46ff56f6-538b-46e1-b30a-961a08713691",
                "0f6511c2-ef8e-4a96-9186-d15a0f999683",
                "84f295ab-098c-4fbb-9c40-c2b461a075df",
                "19c6f4e7-86a6-4d2a-b23b-e39607fac123",
                "292ff153-b4b3-44b2-bf17-aaf03287bbd3",
                "d047e61e-d9af-40a5-a8f2-b234ab0f61f1",
                "d714bee0-7e3a-4b55-8b9a-d0060a70cd2a",
                "5d6a40f5-63ce-427a-9049-b60c55cfec09",
                "85c1459a-4ad9-4c73-b8e0-1f08e3f658de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "48f09137-d505-4434-b98f-69d084a59e74",
          "title": "Questionnaire",
          "fullFile": "/bwa/test/models/questionnaire.test.js",
          "file": "/test/models/questionnaire.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "80012240-ada7-415d-b476-75f8ec7351c4",
              "title": "Input validation",
              "fullFile": "/bwa/test/models/questionnaire.test.js",
              "file": "/test/models/questionnaire.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                  "title": "validateOption()",
                  "fullFile": "/bwa/test/models/questionnaire.test.js",
                  "file": "/test/models/questionnaire.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook",
                      "fullTitle": "Questionnaire Input validation validateOption() \"before each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// avoid object references and create copies\noption = { ...validOption };",
                      "err": {},
                      "uuid": "fd854b92-791c-4831-8d5a-a4f556df9911",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "must validate \"id\" without errors",
                      "fullTitle": "Questionnaire Input validation validateOption() must validate \"id\" without errors",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.id = validId;\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).not.to.exist;",
                      "err": {},
                      "uuid": "3ddc62f0-62ce-4905-bd2f-fbf97a0ca638",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not accept invalid mongo objectId for \"id\"",
                      "fullTitle": "Questionnaire Input validation validateOption() must not accept invalid mongo objectId for \"id\"",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "invalidIds.forEach((id) => {\n    option.id = id;\n    const { error } = Questionnaire.validateOption(option);\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});",
                      "err": {},
                      "uuid": "be1ae944-04f6-46a8-b3b4-f5a07de87b57",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must allow \"_id\"",
                      "fullTitle": "Questionnaire Input validation validateOption() must allow \"_id\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option._id = validId;\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).not.to.exist;",
                      "err": {},
                      "uuid": "fbe9c4e7-07e8-4f51-839d-6ad6ab5db79c",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not accept invalid or empty mongo objectId for \"_id\"",
                      "fullTitle": "Questionnaire Input validation validateOption() must not accept invalid or empty mongo objectId for \"_id\"",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "invalidIds.forEach((id) => {\n    option._id = id;\n    const { error } = Questionnaire.validateOption(option);\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});",
                      "err": {},
                      "uuid": "d0e8ea92-3cc7-4f3b-9c0e-b952301290b4",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow both \"id\" and \"_id\" at the same time",
                      "fullTitle": "Questionnaire Input validation validateOption() must not allow both \"id\" and \"_id\" at the same time",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.id = validId;\noption._id = validId;\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "1439d9e4-6f46-434c-ac8a-2faeafd6cffe",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "allows both \"id\" and \"_id\" be missing at the same time",
                      "fullTitle": "Questionnaire Input validation validateOption() allows both \"id\" and \"_id\" be missing at the same time",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { error } = Questionnaire.validateOption(option);\nexpect(error).not.to.exist;",
                      "err": {},
                      "uuid": "b9a778d3-5485-413e-9b5b-c9ffb6e1160d",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"option\"",
                      "fullTitle": "Questionnaire Input validation validateOption() should require \"option\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete option.option;\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "8f7bf114-a0ff-4e11-88ba-266831b25898",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should trim spaces from \"option\"",
                      "fullTitle": "Questionnaire Input validation validateOption() should trim spaces from \"option\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.option = '  option     ';\nconst { error, value } = Questionnaire.validateOption(\n    option\n);\nexpect(error).not.to.exist;\nexpect(value).to.exist;\nexpect(value)\n    .to.be.an('object')\n    .that.has.a.property('option');\nexpect(value.option).to.equal('option');",
                      "err": {},
                      "uuid": "752b1c9a-4df0-4534-aac9-7ab55e01a6e3",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"option\" to have only spaces",
                      "fullTitle": "Questionnaire Input validation validateOption() should not allow \"option\" to have only spaces",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.option = '       ';\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "92e1ec3e-b4b2-4c88-977f-c8ce061b567b",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"option\" to be at least one character long",
                      "fullTitle": "Questionnaire Input validation validateOption() should require \"option\" to be at least one character long",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.option = '';\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;\noption.option = 'A';\nconst { error: notError } = Questionnaire.validateOption(\n    option\n);\nexpect(notError).to.not.exist;",
                      "err": {},
                      "uuid": "b0281bf9-3ede-476f-90d3-a167b9dd31d5",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"option\" to be longer than 50 characters",
                      "fullTitle": "Questionnaire Input validation validateOption() should not allow \"option\" to be longer than 50 characters",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.option =\n    'Very long text value that is over fifty characters long!';\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "b23e8746-7217-475b-93c8-bdea93c16dd1",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow a dollar sign ($) inside \"option\"",
                      "fullTitle": "Questionnaire Input validation validateOption() should not allow a dollar sign ($) inside \"option\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.option = dollarMsg;\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "16544cb5-3d35-48c4-971f-55cee88923fc",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow missing \"hint\"",
                      "fullTitle": "Questionnaire Input validation validateOption() should allow missing \"hint\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete option.hint;\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.not.exist;",
                      "err": {},
                      "uuid": "d6276fef-f097-423b-ab85-4912c7fc4093",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow empty \"hint\"",
                      "fullTitle": "Questionnaire Input validation validateOption() should allow empty \"hint\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.hint = '';\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.not.exist;",
                      "err": {},
                      "uuid": "76b0d12c-92c7-4048-aa66-8a34b23ce029",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should trim spaces from \"hint\"",
                      "fullTitle": "Questionnaire Input validation validateOption() should trim spaces from \"hint\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.hint = '  hint     ';\nconst { error, value } = Questionnaire.validateOption(\n    option\n);\nexpect(error).not.to.exist;\nexpect(value).to.exist;\nexpect(value)\n    .to.be.an('object')\n    .that.has.a.property('hint');\nexpect(value.hint).to.equal('hint');",
                      "err": {},
                      "uuid": "8fbde9fd-f20a-4391-96a2-00eaaad4b46d",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow a dollar sign ($) inside \"hint\"",
                      "fullTitle": "Questionnaire Input validation validateOption() should not allow a dollar sign ($) inside \"hint\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.hint = dollarMsg;\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "f9963640-a2a6-4a84-9766-0efda0ab8f72",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "limits \"hint\" to 100 characters",
                      "fullTitle": "Questionnaire Input validation validateOption() limits \"hint\" to 100 characters",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "option.hint = `${'happy'.repeat(20)  }y`;\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "d4f7e91e-bcf8-4c2d-93e0-1640e758d36a",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow missing \"correctness\"",
                      "fullTitle": "Questionnaire Input validation validateOption() should not allow missing \"correctness\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete option.correctness;\nconst { error } = Questionnaire.validateOption(option);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "81391299-53c3-4eaf-b9db-0f9ba6fbb43d",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow empty \"correctness\"",
                      "fullTitle": "Questionnaire Input validation validateOption() should not allow empty \"correctness\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const empties = [null, undefined, ''];\nempties.forEach((val) => {\n    option.correctness = val;\n    const { error } = Questionnaire.validateOption(option);\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});",
                      "err": {},
                      "uuid": "7d7ebd83-93f3-4290-89c4-d17dc2f8d57e",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow booleans for \"correctness\"",
                      "fullTitle": "Questionnaire Input validation validateOption() should allow booleans for \"correctness\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const values = [true, false];\nvalues.forEach((val) => {\n    option.correctness = val;\n    const { error } = Questionnaire.validateOption(option);\n    expect(error).to.not.exist;\n});",
                      "err": {},
                      "uuid": "b2aecae9-6f7c-4c25-aef2-c1f22a538963",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow predefined truthy and falsy values for \"correctness\" and convert them to booleans",
                      "fullTitle": "Questionnaire Input validation validateOption() should allow predefined truthy and falsy values for \"correctness\" and convert them to booleans",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const trueValues = ['t', 'y', 'yes', '1', 1];\nconst falseValues = ['f', 'n', 'no', '0', 0];\ntrueValues.forEach((val) => {\n    option.correctness = val;\n    const {\n        error: trueError,\n        value: trueValue\n    } = Questionnaire.validateOption(option);\n    expect(trueError).to.not.exist;\n    expect(trueValue).to.exist;\n    expect(trueValue)\n        .to.be.an('object')\n        .that.has.a.property('correctness');\n    expect(trueValue.correctness).to.be.true;\n});\nfalseValues.forEach((val) => {\n    option.correctness = val;\n    const {\n        error: falseError,\n        value: falseValue\n    } = Questionnaire.validateOption(option);\n    expect(falseError).to.not.exist;\n    expect(falseValue).to.exist;\n    expect(falseValue)\n        .to.be.an('object')\n        .that.has.a.property('correctness');\n    expect(falseValue.correctness).to.be.false;\n});",
                      "err": {},
                      "uuid": "0f7498f5-d656-4bc5-9d48-d1c75a87b1c4",
                      "parentUUID": "3a567de7-3257-4bb4-b0e7-ca587895f36d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3ddc62f0-62ce-4905-bd2f-fbf97a0ca638",
                    "be1ae944-04f6-46a8-b3b4-f5a07de87b57",
                    "fbe9c4e7-07e8-4f51-839d-6ad6ab5db79c",
                    "d0e8ea92-3cc7-4f3b-9c0e-b952301290b4",
                    "1439d9e4-6f46-434c-ac8a-2faeafd6cffe",
                    "b9a778d3-5485-413e-9b5b-c9ffb6e1160d",
                    "8f7bf114-a0ff-4e11-88ba-266831b25898",
                    "752b1c9a-4df0-4534-aac9-7ab55e01a6e3",
                    "92e1ec3e-b4b2-4c88-977f-c8ce061b567b",
                    "b0281bf9-3ede-476f-90d3-a167b9dd31d5",
                    "b23e8746-7217-475b-93c8-bdea93c16dd1",
                    "16544cb5-3d35-48c4-971f-55cee88923fc",
                    "d6276fef-f097-423b-ab85-4912c7fc4093",
                    "76b0d12c-92c7-4048-aa66-8a34b23ce029",
                    "8fbde9fd-f20a-4391-96a2-00eaaad4b46d",
                    "f9963640-a2a6-4a84-9766-0efda0ab8f72",
                    "d4f7e91e-bcf8-4c2d-93e0-1640e758d36a",
                    "81391299-53c3-4eaf-b9db-0f9ba6fbb43d",
                    "7d7ebd83-93f3-4290-89c4-d17dc2f8d57e",
                    "b2aecae9-6f7c-4c25-aef2-c1f22a538963",
                    "0f7498f5-d656-4bc5-9d48-d1c75a87b1c4"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 40,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                  "title": "validateQuestion()",
                  "fullFile": "/bwa/test/models/questionnaire.test.js",
                  "file": "/test/models/questionnaire.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook",
                      "fullTitle": "Questionnaire Input validation validateQuestion() \"before each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// avoid object references and create copies\noptions = validOptions.map((opt) => {\n    return { ...opt };\n});\nquestion = { ...validQuestion };",
                      "err": {},
                      "uuid": "d3ea1225-49e3-4a92-9318-e3d8ac309dbc",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow \"id\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should allow \"id\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "question.id = validId;\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).not.to.exist;",
                      "err": {},
                      "uuid": "db92d6bd-f8ab-4c30-8dad-94b81afd26d1",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not accept invalid mongo objectId for \"id\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should not accept invalid mongo objectId for \"id\"",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "invalidIds.forEach((id) => {\n    question.id = id;\n    const { error } = Questionnaire.validateQuestion(\n        question\n    );\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});",
                      "err": {},
                      "uuid": "ef5b274c-8d15-4672-967c-59d32556c8bb",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow \"_id\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should allow \"_id\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "question._id = validId;\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).not.to.exist;",
                      "err": {},
                      "uuid": "1de4cdc6-a5e4-4607-9620-e0a6d0c244da",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not accept invalid mongo objectId for \"_id\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should not accept invalid mongo objectId for \"_id\"",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "invalidIds.forEach((id) => {\n    question._id = id;\n    const { error } = Questionnaire.validateQuestion(\n        question\n    );\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});",
                      "err": {},
                      "uuid": "53fa27a4-51ec-4164-976d-b438b588cc31",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow both \"id\" and \"_id\" at the same time",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should not allow both \"id\" and \"_id\" at the same time",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "question.id = validId;\nquestion._id = validId;\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "10575485-4b91-4bed-9bac-64178358224f",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow both \"id\" and \"_id\" be missing at the same time",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should allow both \"id\" and \"_id\" be missing at the same time",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { error } = Questionnaire.validateQuestion(question);\nexpect(error).not.to.exist;",
                      "err": {},
                      "uuid": "9365c9d7-cc18-4469-91b8-e96e45f9157e",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require \"title\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() must require \"title\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete question.title;\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "d4433c67-36c0-4c38-93ae-f9396185ddcf",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "trims spaces from question \"title\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() trims spaces from question \"title\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "question.title = '  question     ';\nconst { error, value } = Questionnaire.validateQuestion(\n    question\n);\nexpect(error).not.to.exist;\nexpect(value).to.exist;\nexpect(value)\n    .to.be.an('object')\n    .that.has.a.property('title');\nexpect(value.title).to.equal('question');",
                      "err": {},
                      "uuid": "38e89406-4610-4839-842e-67810cd326b5",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow \"title\" with spaces only",
                      "fullTitle": "Questionnaire Input validation validateQuestion() must not allow \"title\" with spaces only",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "question.title = ' '.repeat(7);\n                const { error } = Questionnaire.validateQuestion(question);\n                expect(error).to.exist;\n                expect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "88c8c9a7-6ae7-438a-87b9-149965727f85",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "requires \"title\" to be at least one character long",
                      "fullTitle": "Questionnaire Input validation validateQuestion() requires \"title\" to be at least one character long",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "question.title = '';\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;\nquestion.title = 'A';\nconst { error: notError } = Questionnaire.validateQuestion(\n    question\n);\nexpect(notError).to.not.exist;",
                      "err": {},
                      "uuid": "13c3573b-139d-4763-b8f7-3cb2c9359b80",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow \"title\" to be longer than 100 characters",
                      "fullTitle": "Questionnaire Input validation validateQuestion() must not allow \"title\" to be longer than 100 characters",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "question.title = `${'happy'.repeat(20)}y`;\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "482daae0-98fc-48fb-a30f-97e246ac4ea7",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow text value with a dollar($) sign in title",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should not allow text value with a dollar($) sign in title",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "question.title = dollarMsg;\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "e413fdb8-958e-47eb-a4a2-4f572c872ae7",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"maxPoints\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should require \"maxPoints\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete question.maxPoints;\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "426f7a25-004a-483d-b1a8-682c3a015ccd",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should only allow integers for \"maxPoints\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should only allow integers for \"maxPoints\"",
                      "timedOut": false,
                      "duration": 16,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "invalidIntegers.forEach((invalidInt) => {\n    question.maxPoints = invalidInt;\n    const { error } = Questionnaire.validateQuestion(\n        question\n    );\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});\nvalidIntegers.forEach((validInt) => {\n    question.maxPoints = validInt;\n    const {\n        error,\n        value\n    } = Questionnaire.validateQuestion(question);\n    expect(error).to.not.exist;\n    expect(value).to.exist;\n    expect(value)\n        .to.be.an('object')\n        .that.has.a.property('maxPoints');\n    expect(value.maxPoints).to.equal(Number(validInt));\n});",
                      "err": {},
                      "uuid": "ff6b8bdf-40a7-4f54-a0ab-f6677fd12960",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow only positive integers for \"maxPoints\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should allow only positive integers for \"maxPoints\"",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const maxPoints = [-1, 0];\nmaxPoints.forEach((maximum) => {\n    question.maxPoints = maximum;\n    const { error } = Questionnaire.validateQuestion(\n        question\n    );\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});\nquestion.maxPoints = 1;\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).to.not.exist;",
                      "err": {},
                      "uuid": "9768f5f7-6760-494e-a289-d8a7290447b2",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"options\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should require \"options\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete question.options;\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "2bb4a960-af2f-4202-b088-aeafb65ebf94",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require atleast two \"options\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should require atleast two \"options\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "question.options = [];\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;\noptions.forEach((opt) => {\n    question.options = [opt];\n    const {\n        error: optError\n    } = Questionnaire.validateQuestion(question);\n    expect(optError).to.exist;\n    expect(optError).to.not.be.empty;\n});\nquestion.options = options;\nconst { error: notError } = Questionnaire.validateQuestion(\n    question\n);\nexpect(notError).to.not.exist;",
                      "err": {},
                      "uuid": "38548cb1-7702-4dae-965b-0f4af104ed0f",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require atleast one correct answer in \"options\"",
                      "fullTitle": "Questionnaire Input validation validateQuestion() should require atleast one correct answer in \"options\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const incorrectAnswers = options.map((opt) => {\n    opt.correctness = false;\n    return opt;\n});\nquestion.options = incorrectAnswers;\nconst { error } = Questionnaire.validateQuestion(question);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "dd96d991-17bb-4bb2-b387-c4ca841d4631",
                      "parentUUID": "bc41c6cc-a270-4d8d-98dd-81547fd24470",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "db92d6bd-f8ab-4c30-8dad-94b81afd26d1",
                    "ef5b274c-8d15-4672-967c-59d32556c8bb",
                    "1de4cdc6-a5e4-4607-9620-e0a6d0c244da",
                    "53fa27a4-51ec-4164-976d-b438b588cc31",
                    "10575485-4b91-4bed-9bac-64178358224f",
                    "9365c9d7-cc18-4469-91b8-e96e45f9157e",
                    "d4433c67-36c0-4c38-93ae-f9396185ddcf",
                    "38e89406-4610-4839-842e-67810cd326b5",
                    "88c8c9a7-6ae7-438a-87b9-149965727f85",
                    "13c3573b-139d-4763-b8f7-3cb2c9359b80",
                    "482daae0-98fc-48fb-a30f-97e246ac4ea7",
                    "e413fdb8-958e-47eb-a4a2-4f572c872ae7",
                    "426f7a25-004a-483d-b1a8-682c3a015ccd",
                    "ff6b8bdf-40a7-4f54-a0ab-f6677fd12960",
                    "9768f5f7-6760-494e-a289-d8a7290447b2",
                    "2bb4a960-af2f-4202-b088-aeafb65ebf94",
                    "38548cb1-7702-4dae-965b-0f4af104ed0f",
                    "dd96d991-17bb-4bb2-b387-c4ca841d4631"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 59,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                  "title": "validateQuestionnaire()",
                  "fullFile": "/bwa/test/models/questionnaire.test.js",
                  "file": "/test/models/questionnaire.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() \"before each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// avoid object references and create copies\nquestions = [...validQuestions];\nquestionnaire = { ...validQuestionnaire };",
                      "err": {},
                      "uuid": "14e05dca-0c26-4308-89f4-8147708308aa",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should allow \"id\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should allow \"id\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.id = validId;\nconst { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).not.to.exist;",
                      "err": {},
                      "uuid": "575dbc2b-d964-469e-b941-1d959f7715e0",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not accept invalid mongo objectId for \"id\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should not accept invalid mongo objectId for \"id\"",
                      "timedOut": false,
                      "duration": 11,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "invalidIds.forEach((id) => {\n    questionnaire.id = id;\n    const { error } = Questionnaire.validateQuestionnaire(\n        questionnaire\n    );\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});",
                      "err": {},
                      "uuid": "4a0adc4f-e265-4773-b49f-26000d9ee6f9",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow \"_id\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should allow \"_id\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire._id = validId;\nconst { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).not.to.exist;",
                      "err": {},
                      "uuid": "2e450b6e-5e19-4e2f-85aa-d75cbc9209c6",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not accept invalid mongo objectId for \"_id\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should not accept invalid mongo objectId for \"_id\"",
                      "timedOut": false,
                      "duration": 14,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "invalidIds.forEach((id) => {\n    questionnaire._id = id;\n    const { error } = Questionnaire.validateQuestionnaire(\n        questionnaire\n    );\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});",
                      "err": {},
                      "uuid": "4515368a-95fe-4407-80c5-29db74a925bc",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow both \"id\" and \"_id\" at the same time",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should not allow both \"id\" and \"_id\" at the same time",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.id = validId;\nquestionnaire._id = validId;\nconst { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "851e9219-3c1a-4713-a860-97ad323e7b23",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow both \"id\" and \"_id\" be missing at the same time",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should allow both \"id\" and \"_id\" be missing at the same time",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).not.to.exist;",
                      "err": {},
                      "uuid": "f1411d07-272b-41ef-bf5c-3abb84fa8981",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require \"title\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() must require \"title\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.title;\nconst { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "5dc65f7d-8a3d-4904-b091-4668533fae57",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "trims spaces from \"title\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() trims spaces from \"title\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.title = '  title     ';\nconst {\n    error,\n    value\n} = Questionnaire.validateQuestionnaire(questionnaire);\nexpect(error).not.to.exist;\nexpect(value).to.exist;\nexpect(value)\n    .to.be.an('object')\n    .that.has.a.property('title');\nexpect(value.title).to.equal('title');",
                      "err": {},
                      "uuid": "cbc50e32-301d-40fd-bdec-72e8df14d2c3",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow \"title\" to have only spaces",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() must not allow \"title\" to have only spaces",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.title = '       ';\nconst { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "8acdc12b-62b8-49c3-9b95-2a47086b76d1",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"title\" to be longer than zero",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should require \"title\" to be longer than zero",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.title = '';\nconst { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;\nquestionnaire.title = 'A';\nconst {\n    error: notError\n} = Questionnaire.validateQuestionnaire(questionnaire);\nexpect(notError).to.not.exist;",
                      "err": {},
                      "uuid": "4d67d25d-4229-4a40-9d92-62133bb8d97f",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"title\" to > 100 characters",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should not allow \"title\" to > 100 characters",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.title = `${'happy'.repeat(20)}y`;\nconst { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "c25972b6-d3e8-413d-a762-f8c83ce17f40",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow a dollar sign ($) inside \"title\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should not allow a dollar sign ($) inside \"title\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.title = dollarMsg;\nconst { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "5b8829a1-e99d-4bb7-acb5-840db335b4f8",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"submissions\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should require \"submissions\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.submissions;\nconst { error } = Questionnaire.validateQuestionnaire(questionnaire);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "e96f12a2-cf73-452a-ba3e-9627901c994c",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should only allow integers for \"submissions\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should only allow integers for \"submissions\"",
                      "timedOut": false,
                      "duration": 18,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "invalidIntegers.forEach((invalidInt) => {\n    questionnaire.submissions = invalidInt;\n    const { error } = Questionnaire.validateQuestionnaire(\n        questionnaire\n    );\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});\nvalidIntegers.forEach((validInt) => {\n    questionnaire.submissions = validInt;\n    const {\n        error,\n        value\n    } = Questionnaire.validateQuestionnaire(questionnaire);\n    expect(error).to.not.exist;\n    expect(value).to.exist;\n    expect(value)\n        .to.be.an('object')\n        .that.has.a.property('submissions');\n    expect(value.submissions).to.equal(Number(validInt));\n});",
                      "err": {},
                      "uuid": "14465243-de0b-477a-b339-314ec9222304",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow only positive integers for \"submissions\"  that can be ensured by defining min: 1 in the schema",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should allow only positive integers for \"submissions\"  that can be ensured by defining min: 1 in the schema",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const submissions = [-1, 0];\nsubmissions.forEach((submission) => {\n    questionnaire.submissions = submission;\n    const { error } = Questionnaire.validateQuestionnaire(\n        questionnaire\n    );\n    expect(error).to.exist;\n    expect(error).to.not.be.empty;\n});\nquestionnaire.submissions = 1;\nconst { error } = Questionnaire.validateQuestionnaire(questionnaire);\nexpect(error).to.not.exist;",
                      "err": {},
                      "uuid": "62a88ea8-bbbf-440b-95e1-ff3c2ec54978",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"questions\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should require \"questions\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.questions;\nconst { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "7a43e1a9-a104-44f2-b0cd-9ed630ee7e45",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"questions\" to not be empty",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should require \"questions\" to not be empty",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions = [];\nconst { error } = Questionnaire.validateQuestionnaire(\n    questionnaire\n);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "0a90cfe8-12f2-4450-aeee-91c07a5cff93",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow multiple \"questions\"",
                      "fullTitle": "Questionnaire Input validation validateQuestionnaire() should allow multiple \"questions\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions = questions;\nconst {\n    error: notError\n} = Questionnaire.validateQuestionnaire(questionnaire);\nexpect(notError).to.not.exist;",
                      "err": {},
                      "uuid": "5feb9390-c245-475a-9962-f3ccf8defb10",
                      "parentUUID": "4bb48cda-6f8a-4e09-8b15-dcba11db2ec1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "575dbc2b-d964-469e-b941-1d959f7715e0",
                    "4a0adc4f-e265-4773-b49f-26000d9ee6f9",
                    "2e450b6e-5e19-4e2f-85aa-d75cbc9209c6",
                    "4515368a-95fe-4407-80c5-29db74a925bc",
                    "851e9219-3c1a-4713-a860-97ad323e7b23",
                    "f1411d07-272b-41ef-bf5c-3abb84fa8981",
                    "5dc65f7d-8a3d-4904-b091-4668533fae57",
                    "cbc50e32-301d-40fd-bdec-72e8df14d2c3",
                    "8acdc12b-62b8-49c3-9b95-2a47086b76d1",
                    "4d67d25d-4229-4a40-9d92-62133bb8d97f",
                    "c25972b6-d3e8-413d-a762-f8c83ce17f40",
                    "5b8829a1-e99d-4bb7-acb5-840db335b4f8",
                    "e96f12a2-cf73-452a-ba3e-9627901c994c",
                    "14465243-de0b-477a-b339-314ec9222304",
                    "62a88ea8-bbbf-440b-95e1-ff3c2ec54978",
                    "7a43e1a9-a104-44f2-b0cd-9ed630ee7e45",
                    "0a90cfe8-12f2-4450-aeee-91c07a5cff93",
                    "5feb9390-c245-475a-9962-f3ccf8defb10"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 71,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "51588366-5861-417b-8fa5-6b1c03c7dce6",
                  "title": "validateSearch()",
                  "fullFile": "/bwa/test/models/questionnaire.test.js",
                  "file": "/test/models/questionnaire.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook",
                      "fullTitle": "Questionnaire Input validation validateSearch() \"before each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// avoid object references and create copies\nconst validSearch = {\n    title: 'title'\n};\nsearch = { ...validSearch };",
                      "err": {},
                      "uuid": "3c375387-a03e-4543-8141-b897e76e18ee",
                      "parentUUID": "51588366-5861-417b-8fa5-6b1c03c7dce6",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow missing \"title\"",
                      "fullTitle": "Questionnaire Input validation validateSearch() should not allow missing \"title\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete search.title;\nconst { error } = Questionnaire.validateSearch(search);\nexpect(error).to.not.exist;",
                      "err": {},
                      "uuid": "c47bca77-a8d0-4279-8080-1fd55f132395",
                      "parentUUID": "51588366-5861-417b-8fa5-6b1c03c7dce6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "trims spaces from \"title\"",
                      "fullTitle": "Questionnaire Input validation validateSearch() trims spaces from \"title\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "search.title = '  title     ';\nconst { error, value } = Questionnaire.validateSearch(\n    search\n);\nexpect(error).not.to.exist;\nexpect(value).to.exist;\nexpect(value)\n    .to.be.an('object')\n    .that.has.a.property('title');\nexpect(value.title).to.equal('title');",
                      "err": {},
                      "uuid": "eeb115d9-715a-4cb4-b2a9-1f16a70658cf",
                      "parentUUID": "51588366-5861-417b-8fa5-6b1c03c7dce6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow \"title\" to have only spaces",
                      "fullTitle": "Questionnaire Input validation validateSearch() must not allow \"title\" to have only spaces",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "search.title = '       ';\nconst { error } = Questionnaire.validateSearch(search);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "da19b31d-787c-4802-90d9-6b572660f8a9",
                      "parentUUID": "51588366-5861-417b-8fa5-6b1c03c7dce6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"title\" to be atleast one character long",
                      "fullTitle": "Questionnaire Input validation validateSearch() should require \"title\" to be atleast one character long",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "search.title = '';\nconst { error } = Questionnaire.validateSearch(search);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;\nsearch.title = 'A';\nconst { error: notError } = Questionnaire.validateSearch(\n    search\n);\nexpect(notError).to.not.exist;",
                      "err": {},
                      "uuid": "6cde9b3f-cdb9-4e4d-8397-56e5b335779d",
                      "parentUUID": "51588366-5861-417b-8fa5-6b1c03c7dce6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"title\" > 100 characters",
                      "fullTitle": "Questionnaire Input validation validateSearch() should not allow \"title\" > 100 characters",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "search.title = `${'happy'.repeat(20)}y`;\nconst { error } = Questionnaire.validateSearch(search);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "4bf829fc-4389-4e4a-9778-39b5d15e442e",
                      "parentUUID": "51588366-5861-417b-8fa5-6b1c03c7dce6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow a dollar sign ($) inside \"title\"",
                      "fullTitle": "Questionnaire Input validation validateSearch() should not allow a dollar sign ($) inside \"title\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "search.title = dollarMsg;\nconst { error } = Questionnaire.validateSearch(search);\nexpect(error).to.exist;\nexpect(error).to.not.be.empty;",
                      "err": {},
                      "uuid": "97738b37-612c-42b2-80d1-9c244b84d56a",
                      "parentUUID": "51588366-5861-417b-8fa5-6b1c03c7dce6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "c47bca77-a8d0-4279-8080-1fd55f132395",
                    "eeb115d9-715a-4cb4-b2a9-1f16a70658cf",
                    "da19b31d-787c-4802-90d9-6b572660f8a9",
                    "6cde9b3f-cdb9-4e4d-8397-56e5b335779d",
                    "4bf829fc-4389-4e4a-9778-39b5d15e442e",
                    "97738b37-612c-42b2-80d1-9c244b84d56a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "ab0d014e-26f6-4215-8118-dc360f7f1e6c",
              "title": "Schema validation",
              "fullFile": "/bwa/test/models/questionnaire.test.js",
              "file": "/test/models/questionnaire.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                  "title": "Questionnaire Schema",
                  "fullFile": "/bwa/test/models/questionnaire.test.js",
                  "file": "/test/models/questionnaire.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema \"before each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// avoid object references and create copies\nquestions = [...validQuestions];\nquestionnaire = { ...validQuestionnaire };\nquestionnaire.questions = [{ ...validQuestion }];",
                      "err": {},
                      "uuid": "e32de498-c5be-4692-9377-98b1e4e9392d",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should require \"title\"",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should require \"title\"",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.title;\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.title).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "14f0661e-7d04-4b61-9a30-b392d69a24bd",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should trim spaces from \"title\"",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should trim spaces from \"title\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.title = '  title   ';\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    // expect(error).to.not.exist;\n    expect(q.title).to.equal('title');\n    done();\n});",
                      "err": {},
                      "uuid": "a65f38b0-0711-4f97-bd20-7ec53458f3e2",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"title\" to have only spaces",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should not allow \"title\" to have only spaces",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.title = '     ';\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.title).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "ac883b26-f6ad-4206-b24f-a1301fad3d64",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"title\" to be at least one character long",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should require \"title\" to be at least one character long",
                      "timedOut": false,
                      "duration": 9,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.title = '';\nlet q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.title).to.exist;\n});\nquestionnaire.title = 'a';\nq = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(q.title).to.equal('a');\n    done();\n});",
                      "err": {},
                      "uuid": "42827f5b-eb40-46b4-b6ba-22e0ca049357",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"title\" to be longer than 100 characters",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should not allow \"title\" to be longer than 100 characters",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.title = `${'hello'.repeat(20)}o`;\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.title).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "28fff54e-5934-4674-9669-8f11d4602dd3",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"submissions\"",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should require \"submissions\"",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.submissions;\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.submissions).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "55ca734f-dc9e-4306-a392-59a2b0f77b2c",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow only integers for \"submissions\"",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should allow only integers for \"submissions\"",
                      "timedOut": false,
                      "duration": 40,
                      "state": "passed",
                      "speed": "medium",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "invalidIntegers.forEach((invalidInt) => {\n    questionnaire.submissions = invalidInt;\n    const q = new Questionnaire(questionnaire);\n    q.validate((error) => {\n        expect(error.errors).to.exist;\n        expect(error.errors.submissions).to.exist;\n    });\n});\ndone();",
                      "err": {},
                      "uuid": "ead311e3-f76d-4470-ac52-c45485fc19e8",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow only positive integers for \"submissions\"",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should allow only positive integers for \"submissions\"",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.submissions = -1;\nlet q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.submissions).to.exist;\n});\nquestionnaire.submissions = 0;\nq = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.submissions).to.exist;\n});\nquestionnaire.submissions = 1;\nq = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(questionnaire.submissions).to.equal(1);\n    done();\n});",
                      "err": {},
                      "uuid": "42ef8702-80ad-4836-9b13-34571441d5d6",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"questions\"",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should require \"questions\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.questions;\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.questions).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "2a0cf823-9310-417f-88da-60a4d82f0d14",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"questions\" to not be empty",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should require \"questions\" to not be empty",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions = [];\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.questions).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "5554365b-332c-4dae-aaf3-212af6056a74",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow multiple \"questions\"",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should allow multiple \"questions\"",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions = questions;\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error).to.not.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "72fdff6f-baa9-4059-aff7-692871a564fd",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require all \"questions\" have unique question text",
                      "fullTitle": "Questionnaire Schema validation Questionnaire Schema should require all \"questions\" have unique question text",
                      "timedOut": false,
                      "duration": 8,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions = [];\nquestions.forEach((qstn) => {\n    qstn.title = 'question';\n    questionnaire.questions.push({...qstn});\n});\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.questions).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "1e55cce1-5b96-4cfb-adbf-7911d7da7b99",
                      "parentUUID": "fac64a28-f1be-4c20-aca7-7f615ca5f3cb",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "14f0661e-7d04-4b61-9a30-b392d69a24bd",
                    "a65f38b0-0711-4f97-bd20-7ec53458f3e2",
                    "ac883b26-f6ad-4206-b24f-a1301fad3d64",
                    "42827f5b-eb40-46b4-b6ba-22e0ca049357",
                    "28fff54e-5934-4674-9669-8f11d4602dd3",
                    "55ca734f-dc9e-4306-a392-59a2b0f77b2c",
                    "ead311e3-f76d-4470-ac52-c45485fc19e8",
                    "42ef8702-80ad-4836-9b13-34571441d5d6",
                    "2a0cf823-9310-417f-88da-60a4d82f0d14",
                    "5554365b-332c-4dae-aaf3-212af6056a74",
                    "72fdff6f-baa9-4059-aff7-692871a564fd",
                    "1e55cce1-5b96-4cfb-adbf-7911d7da7b99"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 92,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                  "title": "Question Schema",
                  "fullFile": "/bwa/test/models/questionnaire.test.js",
                  "file": "/test/models/questionnaire.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook",
                      "fullTitle": "Questionnaire Schema validation Question Schema \"before each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// avoid object references and create copies\noptions = validOptions.map((opt) => {\n    return { ...opt };\n});\nquestionnaire = { ...validQuestionnaire };\nquestionnaire.questions = [{ ...validQuestion }];",
                      "err": {},
                      "uuid": "7f8aa111-1bd2-437c-8240-9ac79226dcc2",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should require \"title\"",
                      "fullTitle": "Questionnaire Schema validation Question Schema should require \"title\"",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.questions[0].title;\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.questions).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "0c25513f-ac1b-4577-9070-e33a0a694872",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should trim spaces from \"title\"",
                      "fullTitle": "Questionnaire Schema validation Question Schema should trim spaces from \"title\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].title = '  question   ';\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(q.questions[0].title).to.equal('question');\n    done();\n});",
                      "err": {},
                      "uuid": "e392cffe-751f-47fa-896f-677c2e128c7b",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"title\" to have only spaces",
                      "fullTitle": "Questionnaire Schema validation Question Schema should not allow \"title\" to have only spaces",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].title = '     ';\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.questions).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "19c17bea-c9d9-4c41-9b1d-3ebaf3082fca",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"title\" to be at least one character long",
                      "fullTitle": "Questionnaire Schema validation Question Schema should require \"title\" to be at least one character long",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].title = '';\nlet q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors.questions).to.exist;\n});\nquestionnaire.questions[0].title = 'a';\nq = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(q.questions[0].title).to.equal('a');\n    done();\n});",
                      "err": {},
                      "uuid": "fdb2e305-3129-4702-aceb-f7f838afa779",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"title\" to be longer than 100 characters",
                      "fullTitle": "Questionnaire Schema validation Question Schema should not allow \"title\" to be longer than 100 characters",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].title =\n    'This very, very, very, very, very, very long text value is exactly one hundred an one characters long';\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors['questions.0.title']).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "b6c0c788-941b-448b-ace1-8081871418b5",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"maxPoints\"",
                      "fullTitle": "Questionnaire Schema validation Question Schema should require \"maxPoints\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.questions[0].maxPoints;\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[maxP]).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "2fafb180-3a29-4711-b2b7-2069672e5104",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow only integers for \"maxPoints\"",
                      "fullTitle": "Questionnaire Schema validation Question Schema should allow only integers for \"maxPoints\"",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "invalidIntegers.forEach((invalidInt) => {\n    questionnaire.questions[0].maxPoints = invalidInt;\n    const q = new Questionnaire(questionnaire);\n    q.validate((error) => {\n        expect(error.errors).to.exist;\n        expect(error.errors[maxP]).to.exist;\n    });\n});\ndone();",
                      "err": {},
                      "uuid": "a2ef1dc1-9420-427e-b869-b593eb6e94c9",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow only positive integers for \"maxPoints\"",
                      "fullTitle": "Questionnaire Schema validation Question Schema should allow only positive integers for \"maxPoints\"",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].maxPoints = -1;\nlet q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[maxP]).to.exist;\n});\nquestionnaire.questions[0].maxPoints = 0;\nq = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[maxP]).to.exist;\n});\nquestionnaire.questions[0].maxPoints = 1;\nq = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(questionnaire.questions[0].maxPoints).to.equal(1);\n    done();\n});",
                      "err": {},
                      "uuid": "ae4825c7-2216-490d-ac9b-6f93f2eedcb6",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"options\"",
                      "fullTitle": "Questionnaire Schema validation Question Schema should require \"options\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.questions[0].options;\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[opt0]).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "50f008a2-888f-4edf-a829-0450dc1194c7",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require at least two \"options\"",
                      "fullTitle": "Questionnaire Schema validation Question Schema should require at least two \"options\"",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options.pop();\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[opt0]).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "1b55d9d1-99c5-4c65-a557-3859ea7d7208",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require all \"options\" to have unique option text",
                      "fullTitle": "Questionnaire Schema validation Question Schema should require all \"options\" to have unique option text",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options = options.map((option) => {\n    option.option = 'option';\n    return option;\n});\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[opt0]).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "b62292f3-409b-4375-b7e4-ae0bbb9999d2",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require at least one correct answer in \"options\"",
                      "fullTitle": "Questionnaire Schema validation Question Schema should require at least one correct answer in \"options\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options = options.map((option) => {\n    option.correctness = false;\n    return option;\n});\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[opt0]).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "55fc177c-fd0f-4326-92d8-37d3e80eb328",
                      "parentUUID": "c1b37eed-92f0-4ec7-a275-49e881c193cc",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0c25513f-ac1b-4577-9070-e33a0a694872",
                    "e392cffe-751f-47fa-896f-677c2e128c7b",
                    "19c17bea-c9d9-4c41-9b1d-3ebaf3082fca",
                    "fdb2e305-3129-4702-aceb-f7f838afa779",
                    "b6c0c788-941b-448b-ace1-8081871418b5",
                    "2fafb180-3a29-4711-b2b7-2069672e5104",
                    "a2ef1dc1-9420-427e-b869-b593eb6e94c9",
                    "ae4825c7-2216-490d-ac9b-6f93f2eedcb6",
                    "50f008a2-888f-4edf-a829-0450dc1194c7",
                    "1b55d9d1-99c5-4c65-a557-3859ea7d7208",
                    "b62292f3-409b-4375-b7e4-ae0bbb9999d2",
                    "55fc177c-fd0f-4326-92d8-37d3e80eb328"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 56,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                  "title": "Option Schema",
                  "fullFile": "/bwa/test/models/questionnaire.test.js",
                  "file": "/test/models/questionnaire.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook",
                      "fullTitle": "Questionnaire Schema validation Option Schema \"before each\" hook",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// avoid object references and create copies\nconst options = validOptions.map((opt) => {\n    return { ...opt };\n});\nconst question = { ...validQuestion };\nquestion.options = options.map((opt) => {\n    return { ...opt };\n});\nquestionnaire = { ...validQuestionnaire };\nquestionnaire.questions = [{ ...question }];",
                      "err": {},
                      "uuid": "50cf5c9d-05a5-4113-90f4-eb583db7b1e1",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should require \"option\"",
                      "fullTitle": "Questionnaire Schema validation Option Schema should require \"option\"",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.questions[0].options[0].option;\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[opt0]).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "09bdc0dd-88d7-42c5-ada2-3b8b7e0b8738",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should trim spaces from \"option\"",
                      "fullTitle": "Questionnaire Schema validation Option Schema should trim spaces from \"option\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options[0].option = '  option 1  ';\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(q.questions[0].options[0].option).to.equal('option 1');\n    done();\n});",
                      "err": {},
                      "uuid": "c8fd61ce-1a67-47a7-89ea-d1633e9f5cb1",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"option\" to have only spaces",
                      "fullTitle": "Questionnaire Schema validation Option Schema should not allow \"option\" to have only spaces",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options[0].option = '    ';\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[opt0]).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "a551e06b-7348-44c7-993a-3c4544b11c55",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"option\" to be at least one character long",
                      "fullTitle": "Questionnaire Schema validation Option Schema should require \"option\" to be at least one character long",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options[0].option = '';\nlet q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[opt0]).to.exist;\n});\nquestionnaire.questions[0].options[0].option = 'a';\nq = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(q.questions[0].options[0].option).to.equal('a');\n    done();\n});",
                      "err": {},
                      "uuid": "29c5f128-9f63-4334-869f-8686b2f5b3be",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"option\" to be longer than 50 characters",
                      "fullTitle": "Questionnaire Schema validation Option Schema should not allow \"option\" to be longer than 50 characters",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options[0].option =\n    'Very long text value that is over fifty characters long!';\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors['questions.0.options.0.option']).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "141bce73-9bbd-463e-9f6b-c54d473fbf8a",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow missing \"hint\"",
                      "fullTitle": "Questionnaire Schema validation Option Schema should allow missing \"hint\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.questions[0].options[0].hint;\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(q.questions[0].options[0].hint).to.not.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "693f24c8-313e-4632-84c5-e8c69a3345b1",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow empty \"hint\"",
                      "fullTitle": "Questionnaire Schema validation Option Schema should allow empty \"hint\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options[0].hint = '';\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(q.questions[0].options[0].hint).to.not.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "1ea004ca-e92b-411a-84cf-04051c3c86d4",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should ignore \"hint\" that is set to undefined",
                      "fullTitle": "Questionnaire Schema validation Option Schema should ignore \"hint\" that is set to undefined",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options[0].hint = undefined;\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(q.questions[0].options[0].hint).to.not.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "16fd4c7e-5428-48e4-94db-a1e43f0f0f74",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should trim spaces from \"hint\"",
                      "fullTitle": "Questionnaire Schema validation Option Schema should trim spaces from \"hint\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options[0].hint = '  hint   ';\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error).to.not.exist;\n    expect(q.questions[0].options[0].hint).to.equal('hint');\n    done();\n});",
                      "err": {},
                      "uuid": "a1180edc-5f6a-4a9b-8b2c-655ffdc3e9a8",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow \"hint\" to be longer than 100 characters",
                      "fullTitle": "Questionnaire Schema validation Option Schema should not allow \"hint\" to be longer than 100 characters",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "questionnaire.questions[0].options[0].hint =\n    'This very, very, very, very, very, very long text value is exactly one hundred an one characters long';\nconst q = new Questionnaire(questionnaire);\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors['questions.0.options.0.hint']).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "596fdbf6-d47b-4921-941c-13d51632df63",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should require \"correctness\"",
                      "fullTitle": "Questionnaire Schema validation Option Schema should require \"correctness\"",
                      "timedOut": false,
                      "duration": 3,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "delete questionnaire.questions[0].options[0].correctness;\nconst q = new Questionnaire(questionnaire);\n// eslint-disable-next-line sonarjs/no-identical-functions\nq.validate((error) => {\n    expect(error.errors).to.exist;\n    expect(error.errors[opt0]).to.exist;\n    done();\n});",
                      "err": {},
                      "uuid": "b57f167c-4208-4dcd-9eb0-1f63bcd17b1a",
                      "parentUUID": "b123a7fc-5ac7-4363-aef0-330bf437825f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "09bdc0dd-88d7-42c5-ada2-3b8b7e0b8738",
                    "c8fd61ce-1a67-47a7-89ea-d1633e9f5cb1",
                    "a551e06b-7348-44c7-993a-3c4544b11c55",
                    "29c5f128-9f63-4334-869f-8686b2f5b3be",
                    "141bce73-9bbd-463e-9f6b-c54d473fbf8a",
                    "693f24c8-313e-4632-84c5-e8c69a3345b1",
                    "1ea004ca-e92b-411a-84cf-04051c3c86d4",
                    "16fd4c7e-5428-48e4-94db-a1e43f0f0f74",
                    "a1180edc-5f6a-4a9b-8b2c-655ffdc3e9a8",
                    "596fdbf6-d47b-4921-941c-13d51632df63",
                    "b57f167c-4208-4dcd-9eb0-1f63bcd17b1a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 39,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        },
        {
          "uuid": "3f23faf7-d464-4812-a43a-71369fcdfd3e",
          "title": "User",
          "fullFile": "/bwa/test/models/user.test.js",
          "file": "/test/models/user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7ee79b93-eb18-4c94-ab73-028b386c3881",
              "title": "Input validation",
              "fullFile": "/bwa/test/models/user.test.js",
              "file": "/test/models/user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "ce74b428-fe13-46f5-af61-a8ee39f49653",
                  "title": "validateLogin()",
                  "fullFile": "/bwa/test/models/user.test.js",
                  "file": "/test/models/user.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "must define email",
                      "fullTitle": "User Input validation validateLogin() must define email",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUser = {\n    password: 'testi12345'\n};\nconst err = User.validateLogin(testUser).error;\nassert(err && err.email, 'testUser does not define an email, however, no error was received');",
                      "err": {},
                      "uuid": "6b97351e-0aa1-427a-a355-b4ff4792a4c6",
                      "parentUUID": "ce74b428-fe13-46f5-af61-a8ee39f49653",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must define a valid email",
                      "fullTitle": "User Input validation validateLogin() must define a valid email",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUser = {\n    email: 'testcasetuni.fi',\n    password: 'testi12345'\n};\nconst err = User.validateLogin(testUser).error;\nassert(err && err.email, 'email of testUser is not valid - there must be an error');",
                      "err": {},
                      "uuid": "ef2b1a47-c4d3-4dd4-909c-7c13a837f0c1",
                      "parentUUID": "ce74b428-fe13-46f5-af61-a8ee39f49653",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must define password",
                      "fullTitle": "User Input validation validateLogin() must define password",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUser = {\n    email: testEmail\n};\nconst err = User.validateLogin(testUser).error;\nassert(err && err.password, 'testUser does not define a password, however, no error was received');",
                      "err": {},
                      "uuid": "4b960f03-4355-4fe8-be0f-fe637c596ea9",
                      "parentUUID": "ce74b428-fe13-46f5-af61-a8ee39f49653",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow an empty password",
                      "fullTitle": "User Input validation validateLogin() must not allow an empty password",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUser = {\n    email: testEmail,\n    password: ''\n};\nconst err = User.validateLogin(testUser).error;\nassert(err && err.password, 'password cannot be empty - an error must be received');",
                      "err": {},
                      "uuid": "7b1a96fb-c83d-425d-b2d0-9b277d22a446",
                      "parentUUID": "ce74b428-fe13-46f5-af61-a8ee39f49653",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must have a password of length 1-100",
                      "fullTitle": "User Input validation validateLogin() must have a password of length 1-100",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUser = {\n    email: 'testcase@tuni.fi',\n    password: ''\n};\nlet err = User.validateLogin(testUser).error;\nassert(err && err.password, 'password must not be empty - an error must be received');\ntestUser.password = createTestString(1);\nerr = User.validateLogin(testUser).error;\nassert(!err, 'one character password is accepted');\ntestUser.password = createTestString(100);\nerr = User.validateLogin(testUser).error;\nassert(!err, '100 character password is accepted');\ntestUser.password = createTestString(101);\nerr = User.validateLogin(testUser).error;\nassert(err && err.password, 'password must not be over 100 characters - there must be error');",
                      "err": {},
                      "uuid": "9b870532-5369-4053-9d03-12716fb366c0",
                      "parentUUID": "ce74b428-fe13-46f5-af61-a8ee39f49653",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6b97351e-0aa1-427a-a355-b4ff4792a4c6",
                    "ef2b1a47-c4d3-4dd4-909c-7c13a837f0c1",
                    "4b960f03-4355-4fe8-be0f-fe637c596ea9",
                    "7b1a96fb-c83d-425d-b2d0-9b277d22a446",
                    "9b870532-5369-4053-9d03-12716fb366c0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "0e3190e1-5424-4288-8726-757886dc1d28",
                  "title": "validateRegistration()",
                  "fullFile": "/bwa/test/models/user.test.js",
                  "file": "/test/models/user.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "must define \"name\"",
                      "fullTitle": "User Input validation validateRegistration() must define \"name\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    email: testEmail2,\n    password: 'ohhoh12345',\n    passwordConfirmation: 'ohhoh12345'\n};\nconst err = User.validateRegistration(testRegistration).error;\nassert(err && err.name, 'must require name');",
                      "err": {},
                      "uuid": "501ef61e-871c-4619-bbe9-25c62b58981e",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "trims spaces from \"name\"",
                      "fullTitle": "User Input validation validateRegistration() trims spaces from \"name\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "// eslint-disable-next-line no-shadow\nconst name = ' Oskari Olematon ';\nconst testRegistration = {\n    name: name,\n    email: testEmail2,\n    password: 'ohhoh12345',\n    passwordConfirmation: 'ohhoh12345'\n};\nconst { error, value } = User.validateRegistration(testRegistration);\nassert(!error, 'must trim trailing spaces');\nassert.strictEqual(name.trim(), value.name, 'must trim trailing spaces');",
                      "err": {},
                      "uuid": "7b0203eb-096b-4968-a4c0-83ed80829320",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow \"name\" with spaces only",
                      "fullTitle": "User Input validation validateRegistration() must not allow \"name\" with spaces only",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    name: '      ',\n    email: testEmail2,\n    password: 'ohhoh12345',\n    passwordConfirmation: 'ohhoh12345'\n};\nconst err = User.validateRegistration(testRegistration).error;\nassert(err && err.name, 'name must not comprise only spaces - there must be an error');",
                      "err": {},
                      "uuid": "82518eeb-abd9-43b0-95c1-ed46207825e8",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require \"name\" to be at least one char long",
                      "fullTitle": "User Input validation validateRegistration() must require \"name\" to be at least one char long",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    name: '',\n    email: testEmail2,\n    password: 'ohhoh12345',\n    passwordConfirmation: 'ohhoh12345'\n};\nlet err = User.validateRegistration(testRegistration).error;\nassert(err && err.name, 'name must be at least one character long');\nconst testRegistration2 = {\n    name: 'a',\n    email: testEmail2,\n    password: 'ohhoh12345',\n    passwordConfirmation: 'ohhoh12345'\n};\nerr = User.validateRegistration(testRegistration2).error;\nassert(!err, 'name is allowed to be one character long');",
                      "err": {},
                      "uuid": "2ea349e3-ef4b-4ee5-aa31-763efb1d4b59",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow \"name\" > 50 characters",
                      "fullTitle": "User Input validation validateRegistration() must not allow \"name\" > 50 characters",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    name: createTestString(51),\n    email: testEmail2,\n    password: 'ohhoh12345',\n    passwordConfirmation: 'ohhoh12345'\n};\nconst err = User.validateRegistration(testRegistration).error;\nassert(err && err.name, 'name must be at most 50 characters long');",
                      "err": {},
                      "uuid": "2be2265d-96dc-4e52-92b4-ef55ad610538",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow a dollar sign ($) inside \"name\"",
                      "fullTitle": "User Input validation validateRegistration() must not allow a dollar sign ($) inside \"name\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    name: 'sadfj$$HK',\n    email: testEmail2,\n    password: 'ohhoh12345',\n    passwordConfirmation: 'ohhoh12345'\n};\nconst err = User.validateRegistration(testRegistration).error;\nassert(err && err.name, 'name must not contain $ char');",
                      "err": {},
                      "uuid": "cd1540da-9a9f-447e-967b-95a2b90f7725",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require an \"email\"",
                      "fullTitle": "User Input validation validateRegistration() must require an \"email\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    name: testName,\n    password: 'ohhoh12345',\n    passwordConfirmation: 'ohhoh12345'\n};\nconst err = User.validateRegistration(testRegistration).error;\nassert(err && err.email, 'email must be included in the registration');",
                      "err": {},
                      "uuid": "c8e7aedf-8b30-42f7-9c1e-ee9ab2103fc3",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require \"email\" to be valid email address",
                      "fullTitle": "User Input validation validateRegistration() must require \"email\" to be valid email address",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    name: testName,\n    email: 'o.ooolioo.com',\n    password: 'ohhoh12345',\n    passwordConfirmation: 'ohhoh12345'\n};\nconst err = User.validateRegistration(testRegistration).error;\nassert(err && err.email, 'must require a valid email');",
                      "err": {},
                      "uuid": "6fc85652-b8e3-4e8d-8aeb-c7a0ba342312",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require \"password\"",
                      "fullTitle": "User Input validation validateRegistration() must require \"password\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    name: testName,\n    email: testEmail2,\n    passwordConfirmation: 'ohhoh'\n};\nconst err = User.validateRegistration(testRegistration).error;\nassert(err && err.password, 'password must be included');",
                      "err": {},
                      "uuid": "b43f0c4b-f5dd-409d-a508-fe44c7af1971",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow empty \"password\"",
                      "fullTitle": "User Input validation validateRegistration() must not allow empty \"password\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    name: testName,\n    email: testEmail2,\n    password: '',\n    passwordConfirmation: ''\n};\nconst err = User.validateRegistration(testRegistration).error;\nassert(err && err.password, 'must not allow an empty password');",
                      "err": {},
                      "uuid": "cdd40f58-d9a6-49be-b4bd-1aef93c9dab2",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require minimum \"password\" length of 10 characters",
                      "fullTitle": "User Input validation validateRegistration() must require minimum \"password\" length of 10 characters",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    name: testName,\n    email: testEmail2,\n    password: 'ohhoh',\n    passwordConfirmation: 'ohhoh'\n};\nconst err = User.validateRegistration(testRegistration).error;\nassert(err && err.password, 'must require at least 10 chars in password');",
                      "err": {},
                      "uuid": "eee5af58-2597-47cb-b341-b99f4a18477a",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require \"passwordConfirmation\" to match \"password\"",
                      "fullTitle": "User Input validation validateRegistration() must require \"passwordConfirmation\" to match \"password\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRegistration = {\n    name: testName,\n    email: testEmail2,\n    password: 'oho1234567',\n    passwordConfirmation: 'oho12345678'\n};\nconst err = User.validateRegistration(testRegistration).error;\nassert(err && err.passwordConfirmation, 'password and confirmation do not match');",
                      "err": {},
                      "uuid": "88316848-5b8a-49e6-b36b-6a1e45b954d2",
                      "parentUUID": "0e3190e1-5424-4288-8726-757886dc1d28",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "501ef61e-871c-4619-bbe9-25c62b58981e",
                    "7b0203eb-096b-4968-a4c0-83ed80829320",
                    "82518eeb-abd9-43b0-95c1-ed46207825e8",
                    "2ea349e3-ef4b-4ee5-aa31-763efb1d4b59",
                    "2be2265d-96dc-4e52-92b4-ef55ad610538",
                    "cd1540da-9a9f-447e-967b-95a2b90f7725",
                    "c8e7aedf-8b30-42f7-9c1e-ee9ab2103fc3",
                    "6fc85652-b8e3-4e8d-8aeb-c7a0ba342312",
                    "b43f0c4b-f5dd-409d-a508-fe44c7af1971",
                    "cdd40f58-d9a6-49be-b4bd-1aef93c9dab2",
                    "eee5af58-2597-47cb-b341-b99f4a18477a",
                    "88316848-5b8a-49e6-b36b-6a1e45b954d2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "8301c435-0fa6-4f18-8883-8e161eec85bf",
                  "title": "validateRole()",
                  "fullFile": "/bwa/test/models/user.test.js",
                  "file": "/test/models/user.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "must require \"role\"",
                      "fullTitle": "User Input validation validateRole() must require \"role\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRole = {};\nconst err = User.validateRole(testRole).error;\nassert(err && err.role, 'must require role');",
                      "err": {},
                      "uuid": "76527345-08a2-43c0-b3fd-0989fbf78794",
                      "parentUUID": "8301c435-0fa6-4f18-8883-8e161eec85bf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow empty \"role\"",
                      "fullTitle": "User Input validation validateRole() must not allow empty \"role\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRole = {\n    role: ''\n};\nconst err = User.validateRole(testRole).error;\nassert(err && err.role, 'must not allow empty role');",
                      "err": {},
                      "uuid": "3d0180da-2f4b-418e-9c35-0543a08b57a8",
                      "parentUUID": "8301c435-0fa6-4f18-8883-8e161eec85bf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must allow any known \"role\"",
                      "fullTitle": "User Input validation validateRole() must allow any known \"role\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRoles = ['student', 'teacher', 'admin'];\ntestRoles.forEach(function(role) {\n    const testRole = {\n        role: role\n    };\n    const err = User.validateRole(testRole).error;\n    assert(!err, `known role ${role} must be accepted`);\n});",
                      "err": {},
                      "uuid": "0e969d0d-5808-45eb-bb4c-04034997eacd",
                      "parentUUID": "8301c435-0fa6-4f18-8883-8e161eec85bf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must trim \"role\"",
                      "fullTitle": "User Input validation validateRole() must trim \"role\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRoles = ['   student', 'teacher  ', ' admin '];\ntestRoles.forEach(function(role) {\n    const testRole = {\n        role: role\n    };\n    const err = User.validateRole(testRole).error;\n    assert(!err, `must trim \"${role}\"`);\n});",
                      "err": {},
                      "uuid": "217be84d-c682-4193-8bbc-abb12ef0d45f",
                      "parentUUID": "8301c435-0fa6-4f18-8883-8e161eec85bf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must handle \"role\" case-insensitively",
                      "fullTitle": "User Input validation validateRole() must handle \"role\" case-insensitively",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRoles = ['Student', 'teacHER', 'ADMIN'];\ntestRoles.forEach(function(role) {\n    const testRole = {\n        role: role\n    };\n    const err = User.validateRole(testRole).error;\n    assert(!err, `\"role\" ${role} was not handled case-insensitively`);\n});",
                      "err": {},
                      "uuid": "38e14940-8d11-4cc2-b2f6-690fb0653108",
                      "parentUUID": "8301c435-0fa6-4f18-8883-8e161eec85bf",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow unknown \"role\"",
                      "fullTitle": "User Input validation validateRole() must not allow unknown \"role\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testRoles = ['elephant', 'lion', 'horse'];\ntestRoles.forEach(function(role) {\n    const testRole = {\n        role: role\n    };\n    const err = User.validateRole(testRole).error;\n    assert(err && err.role, `must not allow unknown \"role\" such as ${role}`);\n});",
                      "err": {},
                      "uuid": "38363b53-ab32-46cc-9652-0e3ea0093288",
                      "parentUUID": "8301c435-0fa6-4f18-8883-8e161eec85bf",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "76527345-08a2-43c0-b3fd-0989fbf78794",
                    "3d0180da-2f4b-418e-9c35-0543a08b57a8",
                    "0e969d0d-5808-45eb-bb4c-04034997eacd",
                    "217be84d-c682-4193-8bbc-abb12ef0d45f",
                    "38e14940-8d11-4cc2-b2f6-690fb0653108",
                    "38363b53-ab32-46cc-9652-0e3ea0093288"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                  "title": "validateUpdate()",
                  "fullFile": "/bwa/test/models/user.test.js",
                  "file": "/test/models/user.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "must require \"name\"",
                      "fullTitle": "User Input validation validateUpdate() must require \"name\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUpdate = {\n    email: testEmail2,\n    password: 'oho1234567'\n};\nconst err = User.validateUpdate(testUpdate).error;\nassert(err && err.name, 'must require name');",
                      "err": {},
                      "uuid": "916ec068-8578-41a1-98d2-ba7d8dacf59a",
                      "parentUUID": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must trim spaces from \"name\"",
                      "fullTitle": "User Input validation validateUpdate() must trim spaces from \"name\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUpdate = {\n    name: '  testName  ',\n    email: testEmail2,\n    password: 'oho1234567'\n};\nconst { error, value } = User.validateUpdate(testUpdate);\nassert(!error, 'must accept name with spaces around it');\nassert.strictEqual(value.name, 'testName', 'must trim spaces from name');",
                      "err": {},
                      "uuid": "4c945aea-22c7-4989-9f6a-78746b913fb3",
                      "parentUUID": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow \"name\" to have only spaces",
                      "fullTitle": "User Input validation validateUpdate() must not allow \"name\" to have only spaces",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUpdate = {\n    name: '   ',\n    email: testEmail2,\n    password: 'oho1234567'\n};\nconst err = User.validateUpdate(testUpdate).error;\nassert(err && err.name, 'must not allow name to have only spaces');",
                      "err": {},
                      "uuid": "bdbfe25f-bf63-4171-8a71-c929d6b65c06",
                      "parentUUID": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require \"name\" to be at least one character long",
                      "fullTitle": "User Input validation validateUpdate() must require \"name\" to be at least one character long",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUpdate = {\n    name: '',\n    email: testEmail2,\n    password: 'oho1234567'\n};\nconst err = User.validateUpdate(testUpdate).error;\nassert(err && err.name, 'must  require name to be at least one charcter long');",
                      "err": {},
                      "uuid": "8757bd67-873f-491f-9c5f-3d54c66217b8",
                      "parentUUID": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow \"name\" to be longer than 50 characters",
                      "fullTitle": "User Input validation validateUpdate() must not allow \"name\" to be longer than 50 characters",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testNameCreate = createTestString(51);\nconst testUpdate = {\n    name: testNameCreate,\n    email: testEmail2,\n    password: 'oho1234567'\n};\nconst err = User.validateUpdate(testUpdate).error;\nassert(err && err.name, 'must not allow name.lenght > 50');",
                      "err": {},
                      "uuid": "96fab341-3063-437b-9114-80422855e821",
                      "parentUUID": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow a dollar sign ($) inside \"name\"",
                      "fullTitle": "User Input validation validateUpdate() must not allow a dollar sign ($) inside \"name\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUpdate = {\n    name: 'Vilma$$Välkky',\n    email: testEmail2,\n    password: 'oho1234567'\n};\nconst err = User.validateUpdate(testUpdate).error;\nassert(err && err.name, 'must not allow a dollar sign inside name');",
                      "err": {},
                      "uuid": "1f11b379-276d-471e-bad8-db2518cddf6a",
                      "parentUUID": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require \"email\"",
                      "fullTitle": "User Input validation validateUpdate() must require \"email\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUpdate = {\n    name: testName,\n    password: 'oho1234567'\n};\nconst err = User.validateUpdate(testUpdate).error;\nassert(err && err.email, 'must require email');",
                      "err": {},
                      "uuid": "2703e386-01d1-4f4f-845e-601fa4697f1c",
                      "parentUUID": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require \"email\" to be a valid email address",
                      "fullTitle": "User Input validation validateUpdate() must require \"email\" to be a valid email address",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUpdate = {\n    name: testName,\n    email: 'o.ooolioo.com',\n    password: 'oho1234567'\n};\nconst err = User.validateUpdate(testUpdate).error;\nassert(err && err.email, 'must require email to be a valid email address');",
                      "err": {},
                      "uuid": "f7b2d751-7ff7-4686-9a22-a268b5e2f2aa",
                      "parentUUID": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must require a password",
                      "fullTitle": "User Input validation validateUpdate() must require a password",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUpdate = {\n    name: testName,\n    email: testEmail2\n};\nconst err = User.validateUpdate(testUpdate).error;\nassert(err && err.password, 'must require a password');",
                      "err": {},
                      "uuid": "415bdaa6-d5f6-4870-a4d5-b4e861024e03",
                      "parentUUID": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must not allow empty password",
                      "fullTitle": "User Input validation validateUpdate() must not allow empty password",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const testUpdate = {\n    name: testName,\n    email: testEmail2,\n    password: ''\n};\nconst err = User.validateUpdate(testUpdate).error;\nassert(err && err.password, 'must not allow empty password');",
                      "err": {},
                      "uuid": "9c714e32-ae5d-4859-ae8a-8718f30a7247",
                      "parentUUID": "8f6d1137-dd6e-4eea-9fd5-0762c0080338",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "916ec068-8578-41a1-98d2-ba7d8dacf59a",
                    "4c945aea-22c7-4989-9f6a-78746b913fb3",
                    "bdbfe25f-bf63-4171-8a71-c929d6b65c06",
                    "8757bd67-873f-491f-9c5f-3d54c66217b8",
                    "96fab341-3063-437b-9114-80422855e821",
                    "1f11b379-276d-471e-bad8-db2518cddf6a",
                    "2703e386-01d1-4f4f-845e-601fa4697f1c",
                    "f7b2d751-7ff7-4686-9a22-a268b5e2f2aa",
                    "415bdaa6-d5f6-4870-a4d5-b4e861024e03",
                    "9c714e32-ae5d-4859-ae8a-8718f30a7247"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 11,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
              "title": "Schema validation",
              "fullFile": "/bwa/test/models/user.test.js",
              "file": "/test/models/user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "must define \"name\"",
                  "fullTitle": "User Schema validation must define \"name\"",
                  "timedOut": false,
                  "duration": 198,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const namelessUser = new User({\n                email: teacherEmail,\n                password: 'SuperTurvallinen',\n                role: 'teacher'\n            });\n            const error = namelessUser.validateSync();\n            expect(error).to.exist;",
                  "err": {},
                  "uuid": "4b4d259b-bc87-457e-844b-8e4dcdd65219",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must trim spaces from \"name\"",
                  "fullTitle": "User Schema validation must trim spaces from \"name\"",
                  "timedOut": false,
                  "duration": 195,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const TrimmedUser = new User({\n    name: '  Anton Aurinkoinen  ',\n    email: teacherEmail,\n    password: 'SuperTurvallinen',\n    role: 'teacher'\n});\nassert.strictEqual(TrimmedUser.name, 'Anton Aurinkoinen');",
                  "err": {},
                  "uuid": "f44e884d-8917-4cd9-8261-0b596f16bb4a",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must not allow \"name\" to have only spaces",
                  "fullTitle": "User Schema validation must not allow \"name\" to have only spaces",
                  "timedOut": false,
                  "duration": 196,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const spaceNameUser = new User({\n    name: '    ',\n    email: teacherEmail,\n    password: 'SuperTurvallinen',\n    role: 'teacher'\n});\nconst error = spaceNameUser.validateSync();\nexpect(error).to.exist;",
                  "err": {},
                  "uuid": "abc794e1-d56d-4ee2-85fe-02b84e341fbc",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must require \"name\" to be at least one character long",
                  "fullTitle": "User Schema validation must require \"name\" to be at least one character long",
                  "timedOut": false,
                  "duration": 195,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const nameWithoutCharacters = new User({\n    name: '',\n    email: teacherEmail,\n    password: 'SuperTurvallinen',\n    role: 'teacher'\n});\nconst error = nameWithoutCharacters.validateSync();\nexpect(error).to.exist;",
                  "err": {},
                  "uuid": "f11cba06-359b-4506-9d8e-0b23b775f1f9",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must not allow \"name\" to be longer than 50 characters",
                  "fullTitle": "User Schema validation must not allow \"name\" to be longer than 50 characters",
                  "timedOut": false,
                  "duration": 203,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const longNameUser = new User({\n    name: createTestString(51),\n    email: teacherEmail,\n    password: 'SuperTurvallinen',\n    role: 'teacher'\n});\nconst error = longNameUser.validateSync();\nexpect(error).to.exist;",
                  "err": {},
                  "uuid": "2f73dc4f-1147-40ec-bdc6-9e300465a896",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must require \"email\"",
                  "fullTitle": "User Schema validation must require \"email\"",
                  "timedOut": false,
                  "duration": 197,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emaillessUser = new User({\n    name: 'Leena',\n    password: 'SuperTurvallinen',\n    role: 'teacher'\n});\nconst error = emaillessUser.validateSync();\nexpect(error).to.exist;",
                  "err": {},
                  "uuid": "0ea63617-0ea9-4a7a-bd9e-c450ae66b1d8",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must require \"email\" to be valid email address",
                  "fullTitle": "User Schema validation must require \"email\" to be valid email address",
                  "timedOut": false,
                  "duration": 195,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const fakeEmailUser = new User({\n    name: 'Pekka',\n    email: 'hopopopo',\n    password: 'SuperTurvallinen',\n    role: 'student'\n});\nconst error = fakeEmailUser.validateSync();\nexpect(error).to.exist;",
                  "err": {},
                  "uuid": "d262febb-c932-4451-9cb2-c93e63e926e2",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must require \"password\"",
                  "fullTitle": "User Schema validation must require \"password\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const passwordlessUser = new User({\n    name: 'Liinu',\n    email: 'sahkoposti@gmail.com',\n    role: 'teacher'\n});\nconst error = passwordlessUser.validateSync();\nexpect(error).to.exist;",
                  "err": {},
                  "uuid": "855aafa0-71a6-4377-a0b1-422ba0166cc3",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must not allow empty \"password\"",
                  "fullTitle": "User Schema validation must not allow empty \"password\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const emptyPasswordUser = new User({\n    name: 'Leenu',\n    email: 'posti@sahkoposti.fi',\n    password: '',\n    role: 'admin'\n});\nconst error = emptyPasswordUser.validateSync();\nexpect(error).to.exist;",
                  "err": {},
                  "uuid": "9faee395-c42e-4723-ab3f-d55bdd663549",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must hash password",
                  "fullTitle": "User Schema validation must hash password",
                  "timedOut": false,
                  "duration": 199,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const hashedUser = new User({\n    name: 'Tiinu',\n    email: testEmail3,\n    password: 'salattu',\n    role: 'student'\n});\nexpect(hashedUser.password).to.not.equal('salattu');",
                  "err": {},
                  "uuid": "14639a21-e6d6-4d7b-a6c0-84169a12cde9",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "has an optional \"role\"",
                  "fullTitle": "User Schema validation has an optional \"role\"",
                  "timedOut": false,
                  "duration": 194,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const rolelessUser = new User({\n    name: 'Tupu',\n    email: testEmail3,\n    password: 'salaperaisyys'\n});\nconst error = rolelessUser.validateSync();\nexpect(error).to.be.undefined;",
                  "err": {},
                  "uuid": "c9408398-656d-4faf-b8af-a696ee533b10",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must set default value of \"role\" to student",
                  "fullTitle": "User Schema validation must set default value of \"role\" to student",
                  "timedOut": false,
                  "duration": 207,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const defaultRoleUser = new User({\n    name: 'Hupu',\n    email: testEmail3,\n    password: 'salaperaisyys'\n});\nexpect(defaultRoleUser.role).to.equal('student');",
                  "err": {},
                  "uuid": "23a515c8-c5e5-483f-af2e-0ad7cbf55640",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must allow any known \"role\"",
                  "fullTitle": "User Schema validation must allow any known \"role\"",
                  "timedOut": false,
                  "duration": 582,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const studentUser = new User({\n    name: 'Tiinu',\n    email: testEmail3,\n    password: 'salattu',\n    role: 'student'\n});\nconst error1 = studentUser.validateSync();\nexpect(error1).to.be.undefined;\nconst teacherUser = new User({\n    name: 'Tiinu',\n    email: testEmail3,\n    password: 'salattu',\n    role: 'teacher'\n});\nconst error2 = teacherUser.validateSync();\nexpect(error2).to.be.undefined;\nconst adminUser = new User({\n    name: 'Tiinu',\n    email: testEmail3,\n    password: 'salattu',\n    role: 'admin'\n});\nconst error3 = adminUser.validateSync();\nexpect(error3).to.be.undefined;",
                  "err": {},
                  "uuid": "51629802-06e6-4d7c-9b71-ad3f7d5f7552",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must trim \"role\"",
                  "fullTitle": "User Schema validation must trim \"role\"",
                  "timedOut": false,
                  "duration": 194,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const roleTrimUser = new User({\n    name: 'Tiinu',\n    email: testEmail3,\n    password: 'salattu',\n    role: '   admin    '\n});\nexpect(roleTrimUser.role).to.equal('admin');",
                  "err": {},
                  "uuid": "7e23bc2d-d62c-43ea-8dd7-cb2f2cf1d5ff",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must cast \"role\" to lowercase",
                  "fullTitle": "User Schema validation must cast \"role\" to lowercase",
                  "timedOut": false,
                  "duration": 195,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const lowerCaseUser = new User({\n    name: 'Tiinu',\n    email: testEmail3,\n    password: 'salattu',\n    role: 'STUDENT'\n});\nexpect(lowerCaseUser.role).to.equal('student');",
                  "err": {},
                  "uuid": "5b6e8d6c-d498-4ceb-965f-3db4ed3374d7",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "must not allow unknown \"role\"",
                  "fullTitle": "User Schema validation must not allow unknown \"role\"",
                  "timedOut": false,
                  "duration": 194,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const unknownUser = new User({\n    name: 'HerraTuntematon',\n    email: testEmail3,\n    password: 'salattu',\n    role: 'maalari'\n});\nconst error = unknownUser.validateSync();\nexpect(error).to.exist;",
                  "err": {},
                  "uuid": "9ce7349d-f591-4162-b008-d2138a3ec002",
                  "parentUUID": "4a48e259-727d-4ae8-8f46-d86a90d2fd04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b4d259b-bc87-457e-844b-8e4dcdd65219",
                "f44e884d-8917-4cd9-8261-0b596f16bb4a",
                "abc794e1-d56d-4ee2-85fe-02b84e341fbc",
                "f11cba06-359b-4506-9d8e-0b23b775f1f9",
                "2f73dc4f-1147-40ec-bdc6-9e300465a896",
                "0ea63617-0ea9-4a7a-bd9e-c450ae66b1d8",
                "d262febb-c932-4451-9cb2-c93e63e926e2",
                "855aafa0-71a6-4377-a0b1-422ba0166cc3",
                "9faee395-c42e-4723-ab3f-d55bdd663549",
                "14639a21-e6d6-4d7b-a6c0-84169a12cde9",
                "c9408398-656d-4faf-b8af-a696ee533b10",
                "23a515c8-c5e5-483f-af2e-0ad7cbf55640",
                "51629802-06e6-4d7c-9b71-ad3f7d5f7552",
                "7e23bc2d-d62c-43ea-8dd7-cb2f2cf1d5ff",
                "5b6e8d6c-d498-4ceb-965f-3db4ed3374d7",
                "9ce7349d-f591-4162-b008-d2138a3ec002"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3146,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            },
            {
              "uuid": "33a5ef05-2e4e-43c6-8d13-440e82445fc3",
              "title": "User document",
              "fullFile": "/bwa/test/models/user.test.js",
              "file": "/test/models/user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "2887552f-7173-47c5-8ea5-ca38cdf17e3a",
                  "title": "virtual getters/properties",
                  "fullFile": "/bwa/test/models/user.test.js",
                  "file": "/test/models/user.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [],
                  "suites": [
                    {
                      "uuid": "67fcccf8-197a-41ca-9df1-70a9b4cfdfd3",
                      "title": "isStudent",
                      "fullFile": "/bwa/test/models/user.test.js",
                      "file": "/test/models/user.test.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "must return true when role is a student",
                          "fullTitle": "User User document virtual getters/properties isStudent must return true when role is a student",
                          "timedOut": false,
                          "duration": 197,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: '1234567890',\n    role: 'student'\n});\nconst ret = testUser.isStudent;\nassert(ret, 'must return true for a student role');",
                          "err": {},
                          "uuid": "e033882f-66b3-4709-8353-11af58abc800",
                          "parentUUID": "67fcccf8-197a-41ca-9df1-70a9b4cfdfd3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "must return true when \"role\" is admin",
                          "fullTitle": "User User document virtual getters/properties isStudent must return true when \"role\" is admin",
                          "timedOut": false,
                          "duration": 195,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: '1234567890',\n    role: 'admin'\n});\nconst ret = testUser.isStudent;\nassert(ret, 'must return true for an admin role');",
                          "err": {},
                          "uuid": "6b643dad-c886-4d42-bf5a-dd444a6d90d8",
                          "parentUUID": "67fcccf8-197a-41ca-9df1-70a9b4cfdfd3",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "must return false when a role is neither student nor admin",
                          "fullTitle": "User User document virtual getters/properties isStudent must return false when a role is neither student nor admin",
                          "timedOut": false,
                          "duration": 195,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: '1234567890',\n    role: 'teacher'\n});\nconst ret = testUser.isStudent;\nassert(!ret, 'must return false when a role is neither student nor admin');",
                          "err": {},
                          "uuid": "dc03b9b8-e3dd-40cc-87c9-7c2a39235974",
                          "parentUUID": "67fcccf8-197a-41ca-9df1-70a9b4cfdfd3",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "e033882f-66b3-4709-8353-11af58abc800",
                        "6b643dad-c886-4d42-bf5a-dd444a6d90d8",
                        "dc03b9b8-e3dd-40cc-87c9-7c2a39235974"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 587,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 20000
                    },
                    {
                      "uuid": "73712280-6132-4c4d-ac7a-700dcde1c0c2",
                      "title": "isTeacher",
                      "fullFile": "/bwa/test/models/user.test.js",
                      "file": "/test/models/user.test.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "must return true when role is a teacher",
                          "fullTitle": "User User document virtual getters/properties isTeacher must return true when role is a teacher",
                          "timedOut": false,
                          "duration": 196,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: '1234567890',\n    role: 'teacher'\n});\nconst ret = testUser.isTeacher;\nassert(ret, 'must return true for a teacher role');",
                          "err": {},
                          "uuid": "b82e55bd-cc1b-46d7-99f2-2d4595b09775",
                          "parentUUID": "73712280-6132-4c4d-ac7a-700dcde1c0c2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "must return true when role is an admin",
                          "fullTitle": "User User document virtual getters/properties isTeacher must return true when role is an admin",
                          "timedOut": false,
                          "duration": 195,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: '1234567890',\n    role: 'admin'\n});\nconst ret = testUser.isTeacher;\nassert(ret, 'must return true for an admin role');",
                          "err": {},
                          "uuid": "5901d764-bac1-42b2-86e7-7caa1a2dc9de",
                          "parentUUID": "73712280-6132-4c4d-ac7a-700dcde1c0c2",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "must return false when role is neither teacher nor admin",
                          "fullTitle": "User User document virtual getters/properties isTeacher must return false when role is neither teacher nor admin",
                          "timedOut": false,
                          "duration": 198,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: '1234567890',\n    role: 'student'\n});\nconst ret = testUser.isTeacher;\nassert(!ret, 'must return false when a role is neither teacher nor admin');",
                          "err": {},
                          "uuid": "407b5fbd-10ea-4836-a05a-19262beef28a",
                          "parentUUID": "73712280-6132-4c4d-ac7a-700dcde1c0c2",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "b82e55bd-cc1b-46d7-99f2-2d4595b09775",
                        "5901d764-bac1-42b2-86e7-7caa1a2dc9de",
                        "407b5fbd-10ea-4836-a05a-19262beef28a"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 589,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 20000
                    },
                    {
                      "uuid": "1553bbf0-2564-4811-bf35-7811481f4ce7",
                      "title": "isAdmin",
                      "fullFile": "/bwa/test/models/user.test.js",
                      "file": "/test/models/user.test.js",
                      "beforeHooks": [],
                      "afterHooks": [],
                      "tests": [
                        {
                          "title": "must return true when role is an admin",
                          "fullTitle": "User User document virtual getters/properties isAdmin must return true when role is an admin",
                          "timedOut": false,
                          "duration": 194,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: '1234567890',\n    role: 'admin'\n});\nconst ret = testUser.isAdmin;\nassert(ret, 'must return true for a teacher role');",
                          "err": {},
                          "uuid": "f0532297-1355-4e6b-b260-d855bc80235f",
                          "parentUUID": "1553bbf0-2564-4811-bf35-7811481f4ce7",
                          "isHook": false,
                          "skipped": false
                        },
                        {
                          "title": "must return false when the role is not an admin",
                          "fullTitle": "User User document virtual getters/properties isAdmin must return false when the role is not an admin",
                          "timedOut": false,
                          "duration": 193,
                          "state": "passed",
                          "speed": "slow",
                          "pass": true,
                          "fail": false,
                          "pending": false,
                          "context": null,
                          "code": "const testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: '1234567890',\n    role: 'teacher'\n});\nconst ret = testUser.isAdmin;\nassert(!ret, 'must return false when the role is not an admin');",
                          "err": {},
                          "uuid": "9e00891c-d005-4b01-8ccb-eafc9f01beb1",
                          "parentUUID": "1553bbf0-2564-4811-bf35-7811481f4ce7",
                          "isHook": false,
                          "skipped": false
                        }
                      ],
                      "suites": [],
                      "passes": [
                        "f0532297-1355-4e6b-b260-d855bc80235f",
                        "9e00891c-d005-4b01-8ccb-eafc9f01beb1"
                      ],
                      "failures": [],
                      "pending": [],
                      "skipped": [],
                      "duration": 387,
                      "root": false,
                      "rootEmpty": false,
                      "_timeout": 20000
                    }
                  ],
                  "passes": [],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                },
                {
                  "uuid": "45c74fcb-9cba-42fa-83e3-bc06637a9403",
                  "title": "Password setter and hashing",
                  "fullFile": "/bwa/test/models/user.test.js",
                  "file": "/test/models/user.test.js",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "must hash \"password\" when new User is constructed",
                      "fullTitle": "User User document Password setter and hashing must hash \"password\" when new User is constructed",
                      "timedOut": false,
                      "duration": 208,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const password = '1234567890';\nconst testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: password,\n    role: 'teacher'\n});\nassert(testUser.password !== password, 'The password must be hashed');\nconst filename = 'models/user.js';\nconst lines = require('fs').readFileSync(filename, 'utf-8').split('\\n').filter(Boolean);\nconst usesBcrypt = lines.some(function(line) {\n    return line.includes('bcrypt');\n});\nassert(usesBcrypt, 'bcrypt must be used');",
                      "err": {},
                      "uuid": "3e60fa2a-d342-4f15-a5a3-a3738472453d",
                      "parentUUID": "45c74fcb-9cba-42fa-83e3-bc06637a9403",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must hash \"password\" when set to a new value",
                      "fullTitle": "User User document Password setter and hashing must hash \"password\" when set to a new value",
                      "timedOut": false,
                      "duration": 405,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const password = '1234567890';\nconst testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: password,\n    role: 'teacher'\n});\nconst password2 = 'heippaMaailma';\ntestUser.password = password2;\nassert(testUser.password !== password2, 'The password must be hashed');",
                      "err": {},
                      "uuid": "81da77ee-8971-412c-86b4-9f3bd004117f",
                      "parentUUID": "45c74fcb-9cba-42fa-83e3-bc06637a9403",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must detect correct \"password\"",
                      "fullTitle": "User User document Password setter and hashing must detect correct \"password\"",
                      "timedOut": false,
                      "duration": 391,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const password = '1234567890';\nconst testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: password,\n    role: 'teacher'\n});\nconst ret = await testUser.checkPassword(password);\nassert(ret && password !== testUser.password, 'must return the set password');",
                      "err": {},
                      "uuid": "17d1fee8-1a56-415c-96c7-1dcf97beb35a",
                      "parentUUID": "45c74fcb-9cba-42fa-83e3-bc06637a9403",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "must detect a false \"password\"",
                      "fullTitle": "User User document Password setter and hashing must detect a false \"password\"",
                      "timedOut": false,
                      "duration": 385,
                      "state": "passed",
                      "speed": "slow",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const password = '1234567890';\nconst testUser = new User({\n    name: testName,\n    email: testEmail4,\n    password: password,\n    role: 'teacher'\n});\nconst ret = await testUser.checkPassword('simsalabim');\nassert(!ret, 'must detect a false password');",
                      "err": {},
                      "uuid": "b35aace7-a255-4314-b747-3ba777be4f3b",
                      "parentUUID": "45c74fcb-9cba-42fa-83e3-bc06637a9403",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3e60fa2a-d342-4f15-a5a3-a3738472453d",
                    "81da77ee-8971-412c-86b4-9f3bd004117f",
                    "17d1fee8-1a56-415c-96c7-1dcf97beb35a",
                    "b35aace7-a255-4314-b747-3ba777be4f3b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1389,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 20000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 20000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 20000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 20000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": true
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}